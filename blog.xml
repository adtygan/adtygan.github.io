<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Aditya Ganesh Kumar</title>
<link>https://adtygan.github.io/blog.html</link>
<atom:link href="https://adtygan.github.io/blog.xml" rel="self" type="application/rss+xml"/>
<description>Personal site of Aditya Ganesh Kumar.</description>
<generator>quarto-1.4.554</generator>
<lastBuildDate>Sun, 23 Jun 2024 16:00:00 GMT</lastBuildDate>
<item>
  <title>Notes on RoFormer: Enhanced Transformer with Rotary Position Embedding</title>
  <link>https://adtygan.github.io/posts/rope-notes.html</link>
  <description><![CDATA[ 





<p><img src="https://adtygan.github.io/posts/media/roformer-head.png" class="img-fluid"></p>
<ul>
<li>RoPE overcomes limitations of its 2 precursors: <strong>Absolute</strong> and <strong>Relative Positional Embedding</strong></li>
<li>It takes the best-of-both-worlds approach
<ul>
<li>Encodes absolute positions using rotation matrix</li>
<li>Incorporates relative positions into the attention matrix</li>
</ul></li>
<li>Offers 3 benefits:
<ul>
<li>Flexibly adapts to work for <strong>any sequence length</strong></li>
<li><strong>Decays the inter-token dependency</strong> as relative distance increases</li>
<li>Equips <strong>linear self-attention</strong> with relative position encoding</li>
</ul></li>
</ul>
<section id="absolute-positional-embedding" class="level2">
<h2 class="anchored" data-anchor-id="absolute-positional-embedding">Absolute Positional Embedding</h2>
<ul>
<li>Input embeddings fed to transformer only convey meaning of token in isolation</li>
<li>We want model to treat nearby words as <em>nearby</em> and distant words as <em>distant</em>
<ul>
<li>Important because self-attention is position invariant</li>
</ul></li>
<li>Represent the above in a manner that model can understand</li>
<li>PE values are only computed once and reused for&nbsp;<strong>every sentence</strong>&nbsp;during both training and inference</li>
<li>All we have to do is add these PE values with input embeddings, which change for every sentence</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://adtygan.github.io/posts/media/abs-pe-1.png" class="img-fluid figure-img"></p>
<figcaption>Source: <strong>Umar Jamil</strong>, <a href="https://www.youtube.com/watch?v=bCz4OMemCcA">Attention is all you need (Transformer)</a></figcaption>
</figure>
</div>
<p><img src="https://latex.codecogs.com/png.latex?EncoderInput%5Bi%5D=%20Embedding%5Bi%5D%20+%20PositionalEmbedding%5Bi%5D"></p>
<section id="formulation" class="level3">
<h3 class="anchored" data-anchor-id="formulation">üìù&nbsp;Formulation</h3>
<p><img src="https://latex.codecogs.com/png.latex?f_%7Bt:%20t%20%5Cin%5C%7Bq,%20k,%20v%5C%7D%7D(%5Cboldsymbol%7Bx%7D_i,%20i):=%20%5C%5C%0A%5Cboldsymbol%7BW%7D_%7Bt:%20t%20%5Cin%5C%7Bq,%20k,%20v%5C%7D%7D(%5Cboldsymbol%7Bx%7D_i,%20%5Cboldsymbol%7Bp_i%7D)"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bcases%7D%20%5C%5C%0A%5Cmathbf%7Bp%7D_%7Bi,%202t%7D%20=%20%5Csin%20%5Cleft(%20k/%7B10000%5E%7B2t/d%7D%7D%20%5Cright)%20%5C%5C%0A%5Cmathbf%7Bp%7D_%7Bi,%202t+1%7D%20=%20%5Ccos%20%5Cleft(%20k/%7B10000%5E%7B2t/d%7D%7D%20%5Cright)%0A%5Cend%7Bcases%7D"></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://adtygan.github.io/posts/media/abs-pe-2.png" class="img-fluid figure-img"></p>
<figcaption>Source: <strong>Umar Jamil</strong>, <a href="https://www.youtube.com/watch?v=bCz4OMemCcA">Attention is all you need (Transformer)</a></figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
‚úçüèª Example
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><img src="https://latex.codecogs.com/png.latex?PE(1,3)"> pertains to the <strong>second token in the sentence</strong> and the <strong>fourth value of the token embedding</strong></li>
<li>Hence we use, <img src="https://latex.codecogs.com/png.latex?pos=1">, <img src="https://latex.codecogs.com/png.latex?2i=2"> and <img src="https://latex.codecogs.com/png.latex?cos"></li>
</ul>
</div>
</div>
</div>
</section>
<section id="visual-intuition" class="level3">
<h3 class="anchored" data-anchor-id="visual-intuition">üñºÔ∏è&nbsp;Visual Intuition</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://adtygan.github.io/posts/media/abs-pe-3.png" class="img-fluid figure-img"></p>
<figcaption>Source: <strong>Amirhossein Kazemnejad</strong>, <a href="https://kazemnejad.com/blog/transformer_architecture_positional_encoding/">Transformer Architecture: The Positional Encoding</a></figcaption>
</figure>
</div>
<ul>
<li>Each row is a relative position embedding (<em>there are 50 token positions here</em>)</li>
<li>Closer positions have visually similar encodings than farther ones</li>
</ul>
</section>
<section id="limitations" class="level3">
<h3 class="anchored" data-anchor-id="limitations">üü° Limitations</h3>
<ul>
<li><strong>Sequence Length Bottleneck:</strong> We cannot represent PE values (<em>and thereby, distance</em>) beyond the sequence length we set (<em>50 in the above diagram</em>)</li>
<li><strong>Lack of Relative Positions:</strong> PE values are computed independently, hence, model treats <ins>pos 1 vs pos 2</ins> the same way as <ins>pos 2 vs pos 100</ins></li>
</ul>
</section>
</section>
<section id="relative-positional-embedding-t5-model" class="level2">
<h2 class="anchored" data-anchor-id="relative-positional-embedding-t5-model">Relative Positional Embedding (T5 model)</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://adtygan.github.io/posts/media/rel-pe-1.png" class="img-fluid figure-img"></p>
<figcaption>Source: <strong>Efficient NLP</strong>, <a href="https://www.youtube.com/watch?v=o29P0Kpobz0">Rotary Positional Embeddings: Combining Absolute and Relative</a></figcaption>
</figure>
</div>
<ul>
<li>Instead of representing a token‚Äôs position, represent a distance offset between 2 tokens using <strong>trainable parameters</strong>
<ul>
<li>(<em>e.g.</em>) <img src="https://latex.codecogs.com/png.latex?b_2"> represents distance offset of 2</li>
</ul></li>
</ul>
<table class="table-striped table-hover table">
<caption>Offset/Bias Matrix</caption>
<thead>
<tr class="header">
<th></th>
<th><img src="https://latex.codecogs.com/png.latex?Anthony"></th>
<th><img src="https://latex.codecogs.com/png.latex?Hopkins"></th>
<th><img src="https://latex.codecogs.com/png.latex?admired"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?Anthony"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_0"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_1"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_2"></td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?Hopkins"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_%7B-1%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_0"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_1"></td>
</tr>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?admired"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_%7B-2%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_%7B-1%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_0"></td>
</tr>
</tbody>
</table>
<ul>
<li>Token pairs that are same distance apart have same offset value</li>
<li>This offset matrix (<em>called bias</em>) is added to attention matrix to encode positions</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?Final%20Attention%20Matrix%20=%20Attention%20Matrix%20+%20Offset%20Matrix"></p>
<section id="formulation-1" class="level3">
<h3 class="anchored" data-anchor-id="formulation-1">üìù&nbsp;Formulation</h3>
<p>Formulation for Absolute Position Embedding:</p>
<p><img src="https://latex.codecogs.com/png.latex?f_%7Bt%20:%20t%20%5Cin%20%5C%7Bq,%20k,%20v%5C%7D%7D%20%5Cleft(%20%5Cmathbf%7Bx%7D_i,%20i%20%5Cright)%20:=%20%5C%5C%0A%5Cmathbf%7BW%7D_%7Bt%20:%20t%20%5Cin%20%5C%7Bq,%20k,%20v%5C%7D%7D%20%5Cleft(%20%5Cmathbf%7Bx%7D_i%20+%20%5Cmathbf%7Bp%7D_i%20%5Cright)"></p>
<p>Formulation expected for Relative Position Embedding:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Af_q%20(%5Cmathbf%7Bx%7D_m)%20&amp;%20:=%20%5Cmathbf%7BW%7D_q%20%5Cmathbf%7Bx%7D_m%20%5C%5C%0Af_k%20(%5Cmathbf%7Bx%7D_n,%20n)%20&amp;%20:=%20%5Cmathbf%7BW%7D_k%20(%5Cmathbf%7Bx%7D_n%20+%20%5Ctilde%7B%5Cmathbf%7Bp%7D%7D_r%5Ek)%20%5C%5C%0Af_v%20(%5Cmathbf%7Bx%7D_n,%20n)%20&amp;%20:=%20%5Cmathbf%7BW%7D_v%20(%5Cmathbf%7Bx%7D_n%20+%20%5Ctilde%7B%5Cmathbf%7Bp%7D%7D_r%5Ev)%0A%5Cend%7Baligned%7D%0A"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctilde%7Bp%7D%5Ek_r"> and <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7Bp%7D%5Ev_r"> are trainable relative position embeddings</li>
<li><img src="https://latex.codecogs.com/png.latex?r%20=%20clip(m%20%E2%88%92%20n,%20rmin,%20rmax)"> , is clipped due to hypothesis that precise relative position is not useful beyond a certain distance</li>
<li>After a few steps, below is the form we arrive for relative position embeddings:</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?q_m%5ET%20k_n%20=%20x_m%5ET%20W_q%5ET%20W_k%20x_n%20+%20x_m%5ET%20W_q%5ET%20%5Ctilde%7BW%7D_k%20%5Ctilde%7Bp%7D_%7Bm-n%7D%20+%20%5C%5C%0A%5Cmathrm%7Bu%7D%5ET%20W_q%5ET%20W_k%20x_n%20+%20%5Cmathrm%7Bv%7D%5ET%20W_q%5ET%20%5Ctilde%7BW%7D_k%20%5Ctilde%7Bp%7D_%7Bm-n%7D"></p>
<ul>
<li>But, later works have simplified the form ü§ó</li>
<li>For instance, <strong>Colin Raffel et al.</strong> <em>‚ÄúExploring the limits of transfer learning with a unified text-to-text transformer‚Äù</em> use:</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?q_m%5ET%20k_n%20=%20x_m%5ET%20W_q%5ET%20W_k%20x_n%20+%20b_%7Bi,j%7D"></p>
<ul>
<li>This form is similar to the one discussed for T5 model</li>
</ul>
</section>
<section id="limitations-1" class="level3">
<h3 class="anchored" data-anchor-id="limitations-1">üü°&nbsp;Limitations</h3>
<ul>
<li><strong>Re-computation of Attention Matrix:</strong> Due to this, as sequence length increases, inference speed decreases</li>
<li><strong>Issues with KV Cache:</strong> For every new token added to sequence, embeddings for all tokens will change, effectively rendering KV Cache impractical</li>
</ul>
<table class="table-striped table-hover table">
<caption>Notice how bias values for <img src="https://latex.codecogs.com/png.latex?Anthony">, <img src="https://latex.codecogs.com/png.latex?Hopkins"> and <img src="https://latex.codecogs.com/png.latex?admired"> changed (1 more column added)</caption>
<thead>
<tr class="header">
<th></th>
<th><img src="https://latex.codecogs.com/png.latex?Anthony"></th>
<th><img src="https://latex.codecogs.com/png.latex?Hopkins"></th>
<th><img src="https://latex.codecogs.com/png.latex?admired"></th>
<th><img src="https://latex.codecogs.com/png.latex?Michael"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?Anthony"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_0"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_1"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_2"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_3"></td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?Hopkins"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_%7B-1%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_0"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_1"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_2"></td>
</tr>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?admired"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_%7B-2%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_%7B-1%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_0"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_1"></td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?Michael"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_%7B-3%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_%7B-2%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_%7B-1%7D"></td>
<td><img src="https://latex.codecogs.com/png.latex?b_0"></td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="enter-rotary-positional-embedding" class="level2">
<h2 class="anchored" data-anchor-id="enter-rotary-positional-embedding">üßµ&nbsp;Enter Rotary Positional Embedding</h2>
<ul>
<li>Instead of adding position embeddings to token embeddings, <strong>rotate the token embeddings</strong> based on its position in the sequence</li>
<li>This solves the limitations of its precursors</li>
<li>‚úÖ&nbsp;<strong>Solves the issue with KV Cache</strong> because we no longer compute a separate bias matrix</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://adtygan.github.io/posts/media/rope-1.png" class="img-fluid figure-img"></p>
<figcaption>Source: <strong>Efficient NLP</strong>, <a href="https://www.youtube.com/watch?v=o29P0Kpobz0">Rotary Positional Embeddings: Combining Absolute and Relative</a></figcaption>
</figure>
</div>
<ul>
<li>‚úÖ&nbsp;Notion of relative distance is preserved across rotations</li>
</ul>
<p><img src="https://adtygan.github.io/posts/media/rope-2.png" class="img-fluid"></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://adtygan.github.io/posts/media/rope-3.png" class="img-fluid figure-img"></p>
<figcaption>Source: <strong>Efficient NLP</strong>, <a href="https://www.youtube.com/watch?v=o29P0Kpobz0">Rotary Positional Embeddings: Combining Absolute and Relative</a></figcaption>
</figure>
</div>
<section id="formulation-2" class="level3">
<h3 class="anchored" data-anchor-id="formulation-2">üìù&nbsp;Formulation</h3>
<ul>
<li>Remember:</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?q_m%20=%20f_q(x_m,%20m)"></p>
<p><img src="https://latex.codecogs.com/png.latex?k_n%20=%20f_k(x_n,%20n)"></p>
<p><img src="https://latex.codecogs.com/png.latex?v_n%20=%20f_v(x_n,%20n)"></p>
<p><img src="https://latex.codecogs.com/png.latex?a_%7Bm,n%7D%20=%20%5Cfrac%7B%5Cexp(%5Cfrac%7Bq_m%5E%5Ctop%20k_n%7D%7B%5Csqrt%7Bd%7D%7D)%7D%7B%5Csum_%7Bj=1%7D%5EN%20%5Cexp(%5Cfrac%7Bq_m%5E%5Ctop%20k_j%7D%7B%5Csqrt%7Bd%7D%7D)%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?o_m%20=%20%5Csum_%7Bn=1%7D%5EN%20a_%7Bm,n%7Dv_n"></p>
<ul>
<li>In Absolute Positional Embedding method, <img src="https://latex.codecogs.com/png.latex?q%5ET_m"> and <img src="https://latex.codecogs.com/png.latex?k_n"> each encoded <strong>individual token positions</strong></li>
<li>Hence, self-attention, (aka <img src="https://latex.codecogs.com/png.latex?q%5ET_mk_n">) led to propagation of information about individual token positions</li>
<li>We want to move away from that and only incorporate <strong>relative position information</strong> during the self-attention operation
<ul>
<li><em>In my understanding</em>, it is because the absolute position is already encoded in the rotation</li>
</ul></li>
<li>In other words, we want the below to happen
<ul>
<li><img src="https://latex.codecogs.com/png.latex?q_m%20=%20f_q(x_m,%20m)"></li>
<li><img src="https://latex.codecogs.com/png.latex?k_n%20=%20f_k(x_n,%20n)"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Clangle%20%5Ccdot,%20%5Ccdot%20%5Crangle"> denotes inner-product</li>
</ul></li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?q%5ET_m%20k_n%20=%20%5Clangle%20f_q(x_m,%20m),%20f_k(x_n,%20n)%20%5Crangle%20=%20g(x_m,%20x_n,%20m%20-%20n)"></p>
<ul>
<li>Note that <img src="https://latex.codecogs.com/png.latex?g(%5Ccdot)"> does not have any individual position information like <img src="https://latex.codecogs.com/png.latex?g(%5Ccdot,%20m,%20n)"></li>
</ul>
<section id="solution-for-2d-case" class="level4">
<h4 class="anchored" data-anchor-id="solution-for-2d-case">Solution for 2D Case</h4>
<ul>
<li>The authors prove that, for the case of 2D vectors, the solution to the above problem is:</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?f_q(%5Cmathbf%7Bx%7D_m,%20m)%20=%20(%5Cmathbf%7BW%7D_q%20%5Cmathbf%7Bx%7D_m)%20e%5E%7Bim%5Ctheta%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?f_k(%5Cmathbf%7Bx%7D_n,%20n)%20=%20(%5Cmathbf%7BW%7D_k%20%5Cmathbf%7Bx%7D_n)%20e%5E%7Bin%5Ctheta%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?g(%5Cmathbf%7Bx%7D_m,%20%5Cmathbf%7Bx%7D_n,%20m%20-%20n)%20=%20%5Ctext%7BRe%7D%5B(%5Cmathbf%7BW%7D_q%20%5Cmathbf%7Bx%7D_m)(%5Cmathbf%7BW%7D_k%20%5Cmathbf%7Bx%7D_n)%5E*%20e%5E%7Bi(m-n)%5Ctheta%7D%5D"></p>
<p><img src="https://latex.codecogs.com/png.latex?f_%7B%5C%7Bq,k%5C%7D%7D(x_m,%20m)%20=%20%5Cbegin%7Bpmatrix%7D%0A%20%20%20%20%5Ccos%20m%5Ctheta%20&amp;%20-%5Csin%20m%5Ctheta%20%5C%5C%0A%20%20%20%20%5Csin%20m%5Ctheta%20&amp;%20%5Ccos%20m%5Ctheta%0A%5Cend%7Bpmatrix%7D%0A%5Cbegin%7Bpmatrix%7D%0A%20%20%20%20W_%7B%5C%7Bq,k%5C%7D%7D%5E%7B(11)%7D%20&amp;%20W_%7B%5C%7Bq,k%5C%7D%7D%5E%7B(12)%7D%20%5C%5C%0A%20%20%20%20W_%7B%5C%7Bq,k%5C%7D%7D%5E%7B(21)%7D%20&amp;%20W_%7B%5C%7Bq,k%5C%7D%7D%5E%7B(22)%7D%0A%5Cend%7Bpmatrix%7D%0A%5Cbegin%7Bpmatrix%7D%0A%20%20%20%20x_m%5E%7B(1)%7D%20%5C%5C%0A%20%20%20%20x_m%5E%7B(2)%7D%0A%5Cend%7Bpmatrix%7D"></p>
<ul>
<li>Notice how first, the <strong>Key</strong> and <strong>Query</strong> are generated before rotation</li>
</ul>
</section>
<section id="solution-for-general-case" class="level4">
<h4 class="anchored" data-anchor-id="solution-for-general-case">Solution for General Case</h4>
<ul>
<li>For any <img src="https://latex.codecogs.com/png.latex?d"> dimensional input embedding, we assume <img src="https://latex.codecogs.com/png.latex?d"> is even and divide the embedding space into <img src="https://latex.codecogs.com/png.latex?d/2"> subspaces</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?f_%7B%5C%7Bq,k%5C%7D%7D(%5Ctextbf%7Bx%7D_m,%20m)%20=%20%5Ctextbf%7BR%7D_%7B%5CTheta,m%7D%5Ed%20%5Ctextbf%7BW%7D_%7B%5C%7Bq,k%5C%7D%7D%20%5Ctextbf%7Bx%7D_m"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bequation%7D%0A%20%20%20%20R_%7B%5CTheta,m%7D%5Ed%20=%20%5Cbegin%7Bpmatrix%7D%0A%20%20%20%20%20%20%20%20%5Ccos%20m%5Ctheta_1%20&amp;%20-%5Csin%20m%5Ctheta_1%20&amp;%200%20&amp;%200%20&amp;%20%5Ccdots%20&amp;%200%20&amp;%200%20%5C%5C%0A%20%20%20%20%20%20%20%20%5Csin%20m%5Ctheta_1%20&amp;%20%5Ccos%20m%5Ctheta_1%20&amp;%200%20&amp;%200%20&amp;%20%5Ccdots%20&amp;%200%20&amp;%200%20%5C%5C%0A%20%20%20%20%20%20%20%200%20&amp;%200%20&amp;%20%5Ccos%20m%5Ctheta_2%20&amp;%20-%5Csin%20m%5Ctheta_2%20&amp;%20%5Ccdots%20&amp;%200%20&amp;%200%20%5C%5C%0A%20%20%20%20%20%20%20%200%20&amp;%200%20&amp;%20%5Csin%20m%5Ctheta_2%20&amp;%20%5Ccos%20m%5Ctheta_2%20&amp;%20%5Ccdots%20&amp;%200%20&amp;%200%20%5C%5C%0A%20%20%20%20%20%20%20%20%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cvdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20&amp;%20%5Cvdots%20%5C%5C%0A%20%20%20%20%20%20%20%200%20&amp;%200%20&amp;%200%20&amp;%200%20&amp;%20%5Ccdots%20&amp;%20%5Ccos%20m%5Ctheta_%7Bd/2%7D%20&amp;%20-%5Csin%20m%5Ctheta_%7Bd/2%7D%20%5C%5C%0A%20%20%20%20%20%20%20%200%20&amp;%200%20&amp;%200%20&amp;%200%20&amp;%20%5Ccdots%20&amp;%20%5Csin%20m%5Ctheta_%7Bd/2%7D%20&amp;%20%5Ccos%20m%5Ctheta_%7Bd/2%7D%0A%20%20%20%20%5Cend%7Bpmatrix%7D%0A%5Cend%7Bequation%7D%0A"></p>
<ul>
<li>This leads us to the <strong>general form</strong> of self-attention using RoPE</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation%7D%0A%20%20%20%20%5Ctextbf%7Bq%7D_m%5E%5Ctop%20%5Ctextbf%7Bk%7D_n%20=%20(%5Ctextbf%7BR%7D_%7B%5CTheta,m%7D%5Ed%20%5Ctextbf%7BW%7D_q%20%5Ctextbf%7Bx%7D_m)%5E%5Ctop%20(%5Ctextbf%7BR%7D_%7B%5CTheta,n%7D%5Ed%20%5Ctextbf%7BW%7D_k%20%5Ctextbf%7Bx%7D_n)%20=%20%5Ctextbf%7Bx%7D_m%5E%5Ctop%20%5Ctextbf%7BW%7D_q%5E%5Ctop%20%5Ctextbf%7BR%7D_%7B%5CTheta,n-m%7D%5Ed%20%5Ctextbf%7BW%7D_k%20%5Ctextbf%7Bx%7D_n%0A%5Cend%7Bequation%7D"></p>
<ul>
<li>Notice how RoPE incorporates relative position information in the self-attention step itself instead of adding it through a bias matrix like its precursor</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://adtygan.github.io/posts/media/rope-4.png" class="img-fluid figure-img"></p>
<figcaption><strong>Implementation of RoPE</strong>, all subspaces within an embedding vector are rotated by same angle</figcaption>
</figure>
</div>
</section>
</section>
<section id="properties-of-rope" class="level3">
<h3 class="anchored" data-anchor-id="properties-of-rope">üçÄ Properties of RoPE</h3>
<section id="flexibly-adapts-to-any-sequence-length" class="level4">
<h4 class="anchored" data-anchor-id="flexibly-adapts-to-any-sequence-length">Flexibly adapts to any sequence length</h4>
<ul>
<li>For any new token, all we need to do is rotate its vector by <img src="https://latex.codecogs.com/png.latex?m%5Ctheta"></li>
<li>The method is scalable and requires no pre-computation</li>
</ul>
</section>
<section id="decay-of-the-inter-token-dependency" class="level4">
<h4 class="anchored" data-anchor-id="decay-of-the-inter-token-dependency">Decay of the inter-token dependency</h4>
<ul>
<li>Set <img src="https://latex.codecogs.com/png.latex?%5Ctheta_i%20=%201000%5E%7B-2i/d%7D"> following original transformers paper</li>
<li>This causes inner-product to decay as relative position increases</li>
</ul>
<p><img src="https://adtygan.github.io/posts/media/rope-5.png" class="img-fluid"></p>
<ul>
<li>Relative upper bound is the <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BR%7D_%7B%5CTheta,n-m%7D%5Ed"> term in general form of RoPE: <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D_m%5E%5Ctop%20%5Ctextbf%7BW%7D_q%5E%5Ctop%20%5Ctextbf%7BR%7D_%7B%5CTheta,n-m%7D%5Ed%20%5Ctextbf%7BW%7D_k%20%5Ctextbf%7Bx%7D_n"></li>
</ul>
</section>
<section id="equips-linear-self-attention-with-relative-position-encoding" class="level4">
<h4 class="anchored" data-anchor-id="equips-linear-self-attention-with-relative-position-encoding">Equips linear self-attention with relative position encoding</h4>
<ul>
<li>Instead of expressing self-attention in the usual way as:</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bequation%7D%0A%20%20%20%20%5Ctext%7BAttention%7D(%5Ctextbf%7BQ%7D,%20%5Ctextbf%7BK%7D,%20%5Ctextbf%7BV%7D)_m%20=%20%5Cfrac%7B%5Csum_%7Bn=1%7D%5EN%20%5Ctext%7Bsim%7D(%5Ctextbf%7Bq%7D_m,%20%5Ctextbf%7Bk%7D_n)%20%5Ctextbf%7Bv%7D_n%7D%7B%5Csum_%7Bn=1%7D%5EN%20%5Ctext%7Bsim%7D(%5Ctextbf%7Bq%7D_m,%20%5Ctextbf%7Bk%7D_n)%7D%0A%5Cend%7Bequation%7D%0A"></p>
<ul>
<li>Linear-attention expresses it as:</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bequation%7D%0A%20%20%20%20%5Ctext%7BAttention%7D(%5Ctextbf%7BQ%7D,%20%5Ctextbf%7BK%7D,%20%5Ctextbf%7BV%7D)_m%20=%20%5Cfrac%7B%5Csum_%7Bn=1%7D%5EN%20%5Cphi(%5Ctextbf%7Bq%7D_m)%5E%5Ctop%20%5Cphi(%5Ctextbf%7Bk%7D_n)%20%5Ctextbf%7Bv%7D_n%7D%7B%5Csum_%7Bn=1%7D%5EN%20%5Cphi(%5Ctextbf%7Bq%7D_m)%5E%5Ctop%20%5Cphi(%5Ctextbf%7Bk%7D_n)%7D%0A%5Cend%7Bequation%7D%0A"></p>
<ul>
<li>The authors propose that RoPE can be combined with linear-attention simply by multiplying the rotation matrices</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bequation%7D%0A%20%20%20%20%5Ctext%7BAttention%7D(%5Ctextbf%7BQ%7D,%20%5Ctextbf%7BK%7D,%20%5Ctextbf%7BV%7D)_m%20=%20%5Cfrac%7B%5Csum_%7Bn=1%7D%5EN%20(%5Ctextbf%7BR%7D_%7B%5CTheta,m%7D%5Ed%20%5Cphi(%5Ctextbf%7Bq%7D_m))%5E%5Ctop%20(%5Ctextbf%7BR%7D_%7B%5CTheta,n%7D%5Ed%20%5Cphi(%5Ctextbf%7Bk%7D_n))%20%5Ctextbf%7Bv%7D_n%7D%7B%5Csum_%7Bn=1%7D%5EN%20%5Cphi(%5Ctextbf%7Bq%7D_m)%5E%5Ctop%20%5Cphi(%5Ctextbf%7Bk%7D_n)%7D%0A%5Cend%7Bequation%7D%0A"></p>
</section>
</section>
</section>
<section id="results" class="level2">
<h2 class="anchored" data-anchor-id="results">Results</h2>
<section id="machine-translation-wmt-2014-english--german-translation" class="level3">
<h3 class="anchored" data-anchor-id="machine-translation-wmt-2014-english--german-translation">1. Machine Translation: WMT 2014 English -German Translation</h3>
<ul>
<li>Evaluate English-to-German translation</li>
</ul>
<p><img src="https://adtygan.github.io/posts/media/rope-6.png" class="img-fluid"></p>
</section>
<section id="pre-training-language-modeling" class="level3">
<h3 class="anchored" data-anchor-id="pre-training-language-modeling">2. Pre-training Language Modeling</h3>
<ul>
<li>Validate performance in learning contextual representations</li>
<li><strong>Pre-training dataset</strong>: BookCorpus and Wikipedia Corpus Foundation</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://adtygan.github.io/posts/media/rope-7.png" class="img-fluid figure-img"></p>
<figcaption>MLM Loss - Masked Language Model Loss, (Cross-Entropy Loss)</figcaption>
</figure>
</div>
</section>
<section id="performer-rope-for-pre-training" class="level3">
<h3 class="anchored" data-anchor-id="performer-rope-for-pre-training">3. PerFormer + RoPE for Pre-Training</h3>
<ul>
<li>PerFormer uses <strong>linear-attention</strong></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://adtygan.github.io/posts/media/rope-8.png" class="img-fluid figure-img"></p>
<figcaption>LM Loss - Language Model Loss, (Cross-Entropy Loss)</figcaption>
</figure>
</div>
</section>
<section id="fine-tuning-on-glue-tasks" class="level3">
<h3 class="anchored" data-anchor-id="fine-tuning-on-glue-tasks">4. Fine-tuning on GLUE tasks</h3>
<ul>
<li><strong>GLUE (General Language Understanding Evaluation)</strong>: Benchmark for evaluating performance of natural language understanding (NLU) models across a diverse set of tasks</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://adtygan.github.io/posts/media/rope-9.png" class="img-fluid figure-img"></p>
<figcaption>Each dataset uses different metric(s), hence, scores are averaged to a final score</figcaption>
</figure>
</div>
</section>
<section id="handling-long-texts-on-chinese-datasets" class="level3">
<h3 class="anchored" data-anchor-id="handling-long-texts-on-chinese-datasets">5. Handling long texts on Chinese Datasets</h3>
<ul>
<li>Performance <strong>improves</strong> as sequence length increases</li>
</ul>
<p><img src="https://adtygan.github.io/posts/media/rope-10.png" class="img-fluid"></p>
<p><img src="https://adtygan.github.io/posts/media/rope-11.png" class="img-fluid"></p>
</section>
<section id="limitations-of-rope" class="level3">
<h3 class="anchored" data-anchor-id="limitations-of-rope">üü°&nbsp;Limitations of RoPE</h3>
<ul>
<li>Unclear why RoPE <strong>converges faster</strong> than other strategies</li>
<li>Superior performance on long texts cannot be explained convincingly
<ul>
<li>Attributed to <strong>long-term decay</strong>, but other strategies have this property as well</li>
</ul></li>
</ul>
</section>
</section>
<section id="rope-scaling" class="level2">
<h2 class="anchored" data-anchor-id="rope-scaling">RoPE Scaling</h2>
<ul>
<li>RoPE has seen widespread adoption in modern architectures like Gemma, PaLM, LLaMA</li>
<li>One exciting reason is <strong>RoPE Scaling</strong></li>
<li><strong>Main Idea</strong>: Modify the base value (<em>10,000 by default</em>) to allow model to handle longer sequences</li>
<li>Base value is scaled using <code>rope_factor</code>
<ul>
<li><code>rope_factor = 2</code> doubles context length</li>
<li>Finding optimal base value depends on task, architecture and requires experimentation</li>
</ul></li>
<li>Idea discussed better in <a href="https://arxiv.org/abs/2310.05209"><strong>Xiaoran Liu, et al.</strong>, Scaling Laws of RoPE-based Extrapolation</a></li>
<li>Just by scaling base value, RoPE can be used for longer sequences, but performance degrades
<ul>
<li>(e.g.) Going from <strong>4k to 32k</strong> <strong>without finetuning</strong> has been done</li>
</ul></li>
<li>Finetuning post scaling helps tackle this issue</li>
<li>Another idea is to progressively scale and finetune to drastically improve context length</li>
<li>‚ú®‚ú®Scaling from <strong>8k to 2048k</strong> <strong>with finetuning</strong> has been achieved</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://adtygan.github.io/posts/media/rope-13.png" class="img-fluid figure-img"></p>
<figcaption>Source: <a href="https://arxiv.org/abs/2310.05209"><strong>Yiran Ding, et al.</strong>, LongRoPE: Extending LLM Context Window Beyond 2 Million Tokens</a></figcaption>
</figure>
</div>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">üìã&nbsp;References</h2>
<ol type="1">
<li><strong>Jianlin Su, et al.</strong>, <a href="https://arxiv.org/abs/2104.09864">RoFormer: Enhanced Transformer with Rotary Position Embedding</a></li>
<li><strong>Umar Jamil</strong>, <a href="https://www.youtube.com/watch?v=bCz4OMemCcA">Attention is all you need (Transformer)</a></li>
<li><strong>Amirhossein Kazemnejad</strong>, <a href="https://kazemnejad.com/blog/transformer_architecture_positional_encoding/">Transformer Architecture: The Positional Encoding</a></li>
<li><strong>Efficient NLP</strong>, <a href="https://www.youtube.com/watch?v=o29P0Kpobz0">Rotary Positional Embeddings: Combining Absolute and Relative</a></li>
</ol>


</section>

 ]]></description>
  <category>Notes</category>
  <category>Transformers</category>
  <guid>https://adtygan.github.io/posts/rope-notes.html</guid>
  <pubDate>Sun, 23 Jun 2024 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Building Business Analyst Agents using Swarms</title>
  <link>https://adtygan.github.io/posts/swarms-business-agent.html</link>
  <description><![CDATA[ 





<p><img src="https://adtygan.github.io/posts/media/swarms-logo-banner.png" class="img-fluid"></p>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
üî• Announcement
</div>
</div>
<div class="callout-body-container callout-body">
<p>This blog is my first OSS contribution and originally appeared in <a href="https://docs.swarms.world/en/latest/applications/business-analyst-agent/">Swarms‚Äô documentation</a></p>
<p>Find the Jupyter Notebook accompanying this post here: <a href="https://github.com/kyegomez/swarms/blob/master/playground/business-analyst-agent.ipynb">Business Analyst Agent Notebook</a></p>
</div>
</div>
<p>Solving a business problem often involves preparing a Business Case Report. This report comprehensively analyzes the problem, evaluates potential solutions, and provides evidence-based recommendations and an implementation plan to effectively address the issue and drive business value. While the process of preparing one requires an experienced business analyst, the workflow can be augmented using AI agents. Two candidates stick out as areas to work on:</p>
<ul>
<li>Developing an outline to solve the problem</li>
<li>Doing background research and gathering data</li>
</ul>
<p>In this blog, we will explore how Swarms agents can be used to tackle a busuiness problem by outlining the solution, conducting background research and generating a preliminary report.</p>
<p>Before we proceed, this blog uses 3 API tools. Please obtain the following keys and store them in a <code>.env</code> file in the same folder as this file.</p>
<ul>
<li><strong><a href="https://openai.com/blog/openai-api">OpenAI API</a></strong> as <code>OPENAI_API_KEY</code></li>
<li><strong><a href="https://app.tavily.com/home">TavilyAI API</a></strong> <code>TAVILY_API_KEY</code></li>
<li><strong><a href="https://www.kay.ai/">KayAI API</a></strong> as <code>KAY_API_KEY</code></li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dotenv</span>
<span id="cb1-2">dotenv.load_dotenv()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load environment variables from .env file</span></span></code></pre></div>
<section id="developing-an-outline-to-solve-the-problem" class="level3">
<h3 class="anchored" data-anchor-id="developing-an-outline-to-solve-the-problem">Developing an Outline to solve the problem</h3>
<p>Assume the business problem is: <strong>How do we improve Nike‚Äôs revenue in Q3 2024?</strong> We first create a planning agent to break down the problem into dependent sub-problems.</p>
<section id="step-1.-defining-the-data-model-and-tool-schema" class="level4">
<h4 class="anchored" data-anchor-id="step-1.-defining-the-data-model-and-tool-schema">Step 1. Defining the Data Model and Tool Schema</h4>
<p>Using Pydantic, we define a structure to help the agent generate sub-problems.</p>
<ul>
<li><strong>QueryType:</strong> Questions are either standalone or involve a combination of multiple others</li>
<li><strong>Query:</strong> Defines structure of a question.</li>
<li><strong>QueryPlan:</strong> Allows generation of a dependency graph of sub-questions</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> enum</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Field, BaseModel</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> QueryType(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, enum.Enum):</span>
<span id="cb2-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Enumeration representing the types of queries that can be asked to a question answer system."""</span></span>
<span id="cb2-7"></span>
<span id="cb2-8">    SINGLE_QUESTION <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SINGLE"</span></span>
<span id="cb2-9">    MERGE_MULTIPLE_RESPONSES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MERGE_MULTIPLE_RESPONSES"</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Query(BaseModel):</span>
<span id="cb2-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Class representing a single question in a query plan."""</span></span>
<span id="cb2-13"></span>
<span id="cb2-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(..., description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unique id of the query"</span>)</span>
<span id="cb2-15">    question: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(</span>
<span id="cb2-16">        ...,</span>
<span id="cb2-17">        description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Question asked using a question answering system"</span>,</span>
<span id="cb2-18">    )</span>
<span id="cb2-19">    dependencies: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(</span>
<span id="cb2-20">        default_factory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>,</span>
<span id="cb2-21">        description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"List of sub questions that need to be answered before asking this question"</span>,</span>
<span id="cb2-22">    )</span>
<span id="cb2-23">    node_type: QueryType <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(</span>
<span id="cb2-24">        default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>QueryType.SINGLE_QUESTION,</span>
<span id="cb2-25">        description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Type of question, either a single question or a multi-question merge"</span>,</span>
<span id="cb2-26">    )</span>
<span id="cb2-27"></span>
<span id="cb2-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> QueryPlan(BaseModel):</span>
<span id="cb2-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Container class representing a tree of questions to ask a question answering system."""</span></span>
<span id="cb2-30"></span>
<span id="cb2-31">    query_graph: List[Query] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Field(</span>
<span id="cb2-32">        ..., description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The query graph representing the plan"</span></span>
<span id="cb2-33">    )</span>
<span id="cb2-34"></span>
<span id="cb2-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _dependencies(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, ids: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[Query]:</span>
<span id="cb2-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Returns the dependencies of a query given their ids."""</span></span>
<span id="cb2-37">        </span>
<span id="cb2-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [q <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> q <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.query_graph <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> q.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ids]</span></code></pre></div>
<p>Also, a <code>tool_schema</code> needs to be defined. It is an instance of <code>QueryPlan</code> and is used to initialize the agent.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">tool_schema <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QueryPlan(</span>
<span id="cb3-2">    query_graph <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [query.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> query <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [</span>
<span id="cb3-3">        Query(</span>
<span id="cb3-4">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb3-5">            question<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How do we improve Nike's revenue in Q3 2024?"</span>,</span>
<span id="cb3-6">            dependencies<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb3-7">            node_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>QueryType(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SINGLE'</span>)</span>
<span id="cb3-8">        ),</span>
<span id="cb3-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... other queries ...</span></span>
<span id="cb3-10">    ]]</span>
<span id="cb3-11">)</span></code></pre></div>
</section>
<section id="step-2.-defining-the-planning-agent" class="level4">
<h4 class="anchored" data-anchor-id="step-2.-defining-the-planning-agent">Step 2. Defining the Planning Agent</h4>
<p>We specify the query, task specification and an appropriate system prompt.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> swarms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OpenAIChat</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> swarms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Agent</span>
<span id="cb4-3"></span>
<span id="cb4-4">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How do we improve Nike's revenue in Q3 2024?"</span></span>
<span id="cb4-5">task <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Consider: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>query<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Generate just the correct query plan in JSON format."</span></span>
<span id="cb4-6">system_prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb4-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a world class query planning algorithm "</span> </span>
<span id="cb4-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capable of breaking apart questions into its "</span> </span>
<span id="cb4-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dependency queries such that the answers can be "</span> </span>
<span id="cb4-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"used to inform the parent question. Do not answer "</span> </span>
<span id="cb4-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the questions, simply provide a correct compute "</span> </span>
<span id="cb4-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"graph with good specific questions to ask and relevant "</span> </span>
<span id="cb4-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dependencies. Before you call the function, think "</span> </span>
<span id="cb4-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"step-by-step to get a better understanding of the problem."</span></span>
<span id="cb4-15">    )</span>
<span id="cb4-16">llm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OpenAIChat(</span>
<span id="cb4-17">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4"</span>, max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span></span>
<span id="cb4-18">)</span></code></pre></div>
<p>Then, we proceed with agent definition.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the agent</span></span>
<span id="cb5-2">agent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Agent(</span>
<span id="cb5-3">    agent_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Query Planner"</span>,</span>
<span id="cb5-4">    system_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>system_prompt,</span>
<span id="cb5-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the tool schema to the JSON string -- this is the key difference</span></span>
<span id="cb5-6">    tool_schema<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tool_schema,</span>
<span id="cb5-7">    llm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>llm,</span>
<span id="cb5-8">    max_loops<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb5-9">    autosave<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb5-10">    dashboard<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb5-11">    streaming_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb5-12">    verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb5-13">    interactive<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb5-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the output type to the tool schema which is a BaseModel</span></span>
<span id="cb5-15">    output_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tool_schema, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or dict, or str</span></span>
<span id="cb5-16">    metadata_output_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"json"</span>,</span>
<span id="cb5-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of schemas that the agent can handle</span></span>
<span id="cb5-18">    list_tool_schemas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[tool_schema],</span>
<span id="cb5-19">    function_calling_format_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OpenAI"</span>,</span>
<span id="cb5-20">    function_calling_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"json"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or soon yaml</span></span>
<span id="cb5-21">)</span></code></pre></div>
</section>
<section id="step-3.-obtaining-outline-from-planning-agent" class="level4">
<h4 class="anchored" data-anchor-id="step-3.-obtaining-outline-from-planning-agent">Step 3. Obtaining Outline from Planning Agent</h4>
<p>We now run the agent, and since its output is in JSON format, we can load it as a dictionary.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">generated_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> agent.run(task)</span></code></pre></div>
<p>At times the agent could return extra content other than JSON. Below function will filter it out.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> process_json_output(content):</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the index of the first occurrence of '```json\n'</span></span>
<span id="cb7-3">    start_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> content.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'```json</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> start_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb7-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If '```json\n' is not found, return the original content</span></span>
<span id="cb7-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> content</span>
<span id="cb7-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the part of the content after '```json\n' and remove the '```' at the end</span></span>
<span id="cb7-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> content[start_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'```json</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>):].rstrip(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'`'</span>)</span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the function to clean up the output</span></span>
<span id="cb7-11">json_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_json_output(generated_data.content)</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the JSON string into a Python object</span></span>
<span id="cb7-16">json_object <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(json_content)</span>
<span id="cb7-17"></span>
<span id="cb7-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the Python object back to a JSON string</span></span>
<span id="cb7-19">json_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.dumps(json_object, indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-20"></span>
<span id="cb7-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the JSON string</span></span>
<span id="cb7-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(json_content)</span></code></pre></div>
<p>Below is the output this produces</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"main_query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How do we improve Nike's revenue in Q3 2024?"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"sub_queries"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-5">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is Nike's current revenue trend?"</span></span>
<span id="cb8-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-9">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-10">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the projected market trends for the sports apparel industry in 2024?"</span></span>
<span id="cb8-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-13">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-14">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the current successful strategies being used by Nike's competitors?"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-15">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dependencies"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb8-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span></span>
<span id="cb8-17">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-20">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-21">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the current and projected economic conditions in Nike's major markets?"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-22">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dependencies"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb8-23">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span></span>
<span id="cb8-24">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-27">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-28">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the current consumer preferences in the sports apparel industry?"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-29">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dependencies"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb8-30">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span></span>
<span id="cb8-31">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-33">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-34">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"6"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-35">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the potential areas of improvement in Nike's current business model?"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-36">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dependencies"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb8-37">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span></span>
<span id="cb8-38">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-39">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-40">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-41">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-42">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the potential new markets for Nike to explore in 2024?"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-43">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dependencies"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb8-44">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-45">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4"</span></span>
<span id="cb8-46">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-47">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-48">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-49">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"8"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-50">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the potential new products or services Nike could introduce in 2024?"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-51">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dependencies"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb8-52">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5"</span></span>
<span id="cb8-53">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-54">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-55">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-56">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"9"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-57">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the potential marketing strategies Nike could use to increase its revenue in Q3 2024?"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-58">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dependencies"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb8-59">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-60">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-61">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-62">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"8"</span></span>
<span id="cb8-63">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-64">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-65">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-66">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-67">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the potential cost-saving strategies Nike could implement to increase its net revenue in Q3 2024?"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-68">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dependencies"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb8-69">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"6"</span></span>
<span id="cb8-70">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-71">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-72">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-73"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The JSON dictionary is not convenient for humans to process. We make a directed graph out of it.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> networkx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nx</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> textwrap</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a directed graph</span></span>
<span id="cb9-7">G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.DiGraph()</span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a color map</span></span>
<span id="cb9-10">color_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add nodes and edges to the graph</span></span>
<span id="cb9-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> sub_query <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> json_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sub_queries'</span>]:</span>
<span id="cb9-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if 'dependencies' key exists in sub_query, if not, initialize it as an empty list</span></span>
<span id="cb9-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dependencies'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sub_query:</span>
<span id="cb9-16">        sub_query[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dependencies'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign a random color for each node</span></span>
<span id="cb9-18">    color_map[sub_query[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:06x}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xFFFFFF</span>))</span>
<span id="cb9-19">    G.add_node(sub_query[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>textwrap.fill(sub_query[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'query'</span>], width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>))</span>
<span id="cb9-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> dependency <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sub_query[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dependencies'</span>]:</span>
<span id="cb9-21">        G.add_edge(dependency, sub_query[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>])</span>
<span id="cb9-22"></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw the graph</span></span>
<span id="cb9-24">pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.spring_layout(G)</span>
<span id="cb9-25">nx.draw(G, pos, with_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, node_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>, node_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[color_map[node] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> node <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> G.nodes()], node_shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, linewidths<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb9-26"></span>
<span id="cb9-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare labels for legend</span></span>
<span id="cb9-28">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.get_node_attributes(G, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>)</span>
<span id="cb9-29">handles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [plt.Line2D([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color_map[node], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>node<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'None'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> node, label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels.items()]</span>
<span id="cb9-30"></span>
<span id="cb9-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a legend</span></span>
<span id="cb9-32">plt.legend(handles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>handles, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Queries"</span>, bbox_to_anchor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.05</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper left'</span>)</span>
<span id="cb9-33"></span>
<span id="cb9-34">plt.show()</span></code></pre></div>
<p>This produces the below diagram which makes the plan much more convenient to understand.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://adtygan.github.io/posts/media/query-plan.png" class="img-fluid figure-img"></p>
<figcaption>The Query plan diagram shows the different sub-questions along with their dependencies</figcaption>
</figure>
</div>
</section>
</section>
<section id="doing-background-research-and-gathering-data" class="level3">
<h3 class="anchored" data-anchor-id="doing-background-research-and-gathering-data">Doing Background Research and Gathering Data</h3>
<p>At this point, we have solved the first half of the problem. We have an outline consisting of sub-problems to to tackled to solve our business problem. This will form the overall structure of our report. We now need to research information for each sub-problem in order to write an informed report. This mechanically intensive and is the aspect that will most benefit from Agentic intervention.</p>
<p>Essentially, we can spawn parallel agents to gather the data. Each agent will have 2 tools:</p>
<ul>
<li>Internet access</li>
<li>Financial data retrieval</li>
</ul>
<p>As they run parallely, they will add their knowledge into a common long-term memory. We will then spawn a separate report writing agent with access to this memory to generate our business case report.</p>
<section id="step-4.-defining-tools-for-worker-agents" class="level4">
<h4 class="anchored" data-anchor-id="step-4.-defining-tools-for-worker-agents">Step 4. Defining Tools for Worker Agents</h4>
<p>Let us first define the 2 tools.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List, Dict</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> swarms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tool</span>
<span id="cb10-5"></span>
<span id="cb10-6">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TAVILY_API_KEY'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TAVILY_API_KEY'</span>)</span>
<span id="cb10-7">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KAY_API_KEY"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KAY_API_KEY'</span>)</span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_community.tools.tavily_search <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TavilySearchResults</span>
<span id="cb10-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.pydantic_v1 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseModel, Field</span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kay.rag.retrievers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KayRetriever</span>
<span id="cb10-13"></span>
<span id="cb10-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@tool</span></span>
<span id="cb10-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> browser(query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb10-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Search the query in the browser with the Tavily API tool.</span></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb10-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        query (str): The query to search in the browser.</span></span>
<span id="cb10-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb10-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        str: The search results</span></span>
<span id="cb10-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb10-23">    internet_search <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TavilySearchResults()</span>
<span id="cb10-24">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  internet_search.invoke({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query"</span>: query})</span>
<span id="cb10-25">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span> </span>
<span id="cb10-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> result <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> results:</span>
<span id="cb10-27">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb10-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> response</span>
<span id="cb10-29"></span>
<span id="cb10-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@tool</span></span>
<span id="cb10-31"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> kay_retriever(query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb10-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Search the financial data query with the KayAI API tool.</span></span>
<span id="cb10-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb10-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        query (str): The query to search in the KayRetriever.</span></span>
<span id="cb10-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb10-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        str: The first context retrieved as a string.</span></span>
<span id="cb10-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb10-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the retriever</span></span>
<span id="cb10-40">    retriever <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KayRetriever(dataset_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"company"</span>,  data_types<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10-K"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10-Q"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"8-K"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PressRelease"</span>])</span>
<span id="cb10-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Query the retriever</span></span>
<span id="cb10-42">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> retriever.query(query<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>query,num_context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> context[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chunk_embed_text'</span>]</span></code></pre></div>
</section>
<section id="step-5.-defining-long-term-memory" class="level4">
<h4 class="anchored" data-anchor-id="step-5.-defining-long-term-memory">Step 5. Defining Long-Term Memory</h4>
<p>As mentioned previously, the worker agents running parallely, will pool their knowledge into a common memory. Let us define that.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb11-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uuid</span>
<span id="cb11-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Callable, List, Optional</span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> chromadb</span>
<span id="cb11-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb11-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> swarms.utils.data_to_text <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> data_to_text</span>
<span id="cb11-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> swarms.utils.markdown_message <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display_markdown_message</span>
<span id="cb11-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> swarms.memory.base_vectordb <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AbstractVectorDatabase</span>
<span id="cb11-13"></span>
<span id="cb11-14"></span>
<span id="cb11-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Results storage using local ChromaDB</span></span>
<span id="cb11-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ChromaDB(AbstractVectorDatabase):</span>
<span id="cb11-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-18"></span>
<span id="cb11-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ChromaDB database</span></span>
<span id="cb11-20"></span>
<span id="cb11-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb11-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        metric (str): The similarity metric to use.</span></span>
<span id="cb11-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        output (str): The name of the collection to store the results in.</span></span>
<span id="cb11-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        limit_tokens (int, optional): The maximum number of tokens to use for the query. Defaults to 1000.</span></span>
<span id="cb11-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        n_results (int, optional): The number of results to retrieve. Defaults to 2.</span></span>
<span id="cb11-26"></span>
<span id="cb11-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Methods:</span></span>
<span id="cb11-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        add: _description_</span></span>
<span id="cb11-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        query: _description_</span></span>
<span id="cb11-30"></span>
<span id="cb11-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples:</span></span>
<span id="cb11-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        &gt;&gt;&gt; chromadb = ChromaDB(</span></span>
<span id="cb11-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        &gt;&gt;&gt;     metric="cosine",</span></span>
<span id="cb11-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        &gt;&gt;&gt;     output="results",</span></span>
<span id="cb11-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        &gt;&gt;&gt;     llm="gpt3",</span></span>
<span id="cb11-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        &gt;&gt;&gt;     openai_api_key=OPENAI_API_KEY,</span></span>
<span id="cb11-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        &gt;&gt;&gt; )</span></span>
<span id="cb11-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        &gt;&gt;&gt; chromadb.add(task, result, result_id)</span></span>
<span id="cb11-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb11-40"></span>
<span id="cb11-41">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(</span>
<span id="cb11-42">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb11-43">        metric: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cosine"</span>,</span>
<span id="cb11-44">        output_dir: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"swarms"</span>,</span>
<span id="cb11-45">        limit_tokens: Optional[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb11-46">        n_results: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb11-47">        embedding_function: Callable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb11-48">        docs_folder: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb11-49">        verbose: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb11-50">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args,</span>
<span id="cb11-51">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs,</span>
<span id="cb11-52">    ):</span>
<span id="cb11-53">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.metric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> metric</span>
<span id="cb11-54">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.output_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output_dir</span>
<span id="cb11-55">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.limit_tokens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> limit_tokens</span>
<span id="cb11-56">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_results</span>
<span id="cb11-57">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.docs_folder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> docs_folder</span>
<span id="cb11-58">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose</span>
<span id="cb11-59"></span>
<span id="cb11-60">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Disable ChromaDB logging</span></span>
<span id="cb11-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> verbose:</span>
<span id="cb11-62">            logging.getLogger(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chromadb"</span>).setLevel(logging.INFO)</span>
<span id="cb11-63"></span>
<span id="cb11-64">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create Chroma collection</span></span>
<span id="cb11-65">        chroma_persist_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chroma"</span></span>
<span id="cb11-66">        chroma_client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chromadb.PersistentClient(</span>
<span id="cb11-67">            settings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chromadb.config.Settings(</span>
<span id="cb11-68">                persist_directory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chroma_persist_dir,</span>
<span id="cb11-69">            ),</span>
<span id="cb11-70">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args,</span>
<span id="cb11-71">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs,</span>
<span id="cb11-72">        )</span>
<span id="cb11-73"></span>
<span id="cb11-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Embedding model</span></span>
<span id="cb11-75">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> embedding_function:</span>
<span id="cb11-76">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.embedding_function <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embedding_function</span>
<span id="cb11-77">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb11-78">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.embedding_function <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb11-79"></span>
<span id="cb11-80">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create ChromaDB client</span></span>
<span id="cb11-81">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chromadb.Client()</span>
<span id="cb11-82"></span>
<span id="cb11-83">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create Chroma collection</span></span>
<span id="cb11-84">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.collection <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chroma_client.get_or_create_collection(</span>
<span id="cb11-85">            name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>output_dir,</span>
<span id="cb11-86">            metadata<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hnsw:space"</span>: metric},</span>
<span id="cb11-87">            embedding_function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.embedding_function,</span>
<span id="cb11-88">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data_loader=self.data_loader,</span></span>
<span id="cb11-89">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args,</span>
<span id="cb11-90">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs,</span>
<span id="cb11-91">        )</span>
<span id="cb11-92">        display_markdown_message(</span>
<span id="cb11-93">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ChromaDB collection created:"</span></span>
<span id="cb11-94">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f" </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>collection<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> with metric: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>metric<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and"</span></span>
<span id="cb11-95">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f" output directory: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>output_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb11-96">        )</span>
<span id="cb11-97"></span>
<span id="cb11-98">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If docs</span></span>
<span id="cb11-99">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> docs_folder:</span>
<span id="cb11-100">            display_markdown_message(</span>
<span id="cb11-101">                <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Traversing directory: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>docs_folder<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb11-102">            )</span>
<span id="cb11-103">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.traverse_directory()</span>
<span id="cb11-104"></span>
<span id="cb11-105">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add(</span>
<span id="cb11-106">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb11-107">        document: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb11-108">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args,</span>
<span id="cb11-109">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs,</span>
<span id="cb11-110">    ):</span>
<span id="cb11-111">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-112"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Add a document to the ChromaDB collection.</span></span>
<span id="cb11-113"></span>
<span id="cb11-114"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb11-115"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            document (str): The document to be added.</span></span>
<span id="cb11-116"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            condition (bool, optional): The condition to check before adding the document. Defaults to True.</span></span>
<span id="cb11-117"></span>
<span id="cb11-118"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb11-119"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            str: The ID of the added document.</span></span>
<span id="cb11-120"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb11-121">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb11-122">            doc_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(uuid.uuid4())</span>
<span id="cb11-123">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.collection.add(</span>
<span id="cb11-124">                ids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[doc_id],</span>
<span id="cb11-125">                documents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[document],</span>
<span id="cb11-126">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args,</span>
<span id="cb11-127">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs,</span>
<span id="cb11-128">            )</span>
<span id="cb11-129">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-----------------'</span>)</span>
<span id="cb11-130">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Document added successfully"</span>)</span>
<span id="cb11-131">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-----------------'</span>)</span>
<span id="cb11-132">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> doc_id</span>
<span id="cb11-133">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb11-134">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Failed to add document: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(e)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-135"></span>
<span id="cb11-136">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> query(</span>
<span id="cb11-137">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb11-138">        query_text: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb11-139">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args,</span>
<span id="cb11-140">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs,</span>
<span id="cb11-141">    ):</span>
<span id="cb11-142">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-143"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Query documents from the ChromaDB collection.</span></span>
<span id="cb11-144"></span>
<span id="cb11-145"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb11-146"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            query (str): The query string.</span></span>
<span id="cb11-147"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            n_docs (int, optional): The number of documents to retrieve. Defaults to 1.</span></span>
<span id="cb11-148"></span>
<span id="cb11-149"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb11-150"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            dict: The retrieved documents.</span></span>
<span id="cb11-151"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb11-152">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb11-153">            docs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.collection.query(</span>
<span id="cb11-154">                query_texts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[query_text],</span>
<span id="cb11-155">                n_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_results,</span>
<span id="cb11-156">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args,</span>
<span id="cb11-157">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs,</span>
<span id="cb11-158">            )[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"documents"</span>]</span>
<span id="cb11-159">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> docs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb11-160">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb11-161">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Failed to query documents: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(e)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-162"></span>
<span id="cb11-163">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> traverse_directory(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb11-164">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-165"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Traverse through every file in the given directory and its subdirectories,</span></span>
<span id="cb11-166"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        and return the paths of all files.</span></span>
<span id="cb11-167"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb11-168"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - directory_name (str): The name of the directory to traverse.</span></span>
<span id="cb11-169"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb11-170"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - list: A list of paths to each file in the directory and its subdirectories.</span></span>
<span id="cb11-171"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb11-172">        added_to_db <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb11-173"></span>
<span id="cb11-174">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> root, dirs, files <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.walk(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.docs_folder):</span>
<span id="cb11-175">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> files:</span>
<span id="cb11-176">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.docs_folder, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb11-177">                _, ext <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.splitext(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb11-178">                data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_to_text(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb11-179">                added_to_db <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.add([data])</span>
<span id="cb11-180">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> added to Database"</span>)</span>
<span id="cb11-181"></span>
<span id="cb11-182">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> added_to_db</span></code></pre></div>
<p>We can now proceed to initialize the memory.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> chromadb.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> embedding_functions</span>
<span id="cb12-2">default_ef <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embedding_functions.DefaultEmbeddingFunction()</span>
<span id="cb12-3"></span>
<span id="cb12-4">memory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChromaDB(</span>
<span id="cb12-5">    metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cosine"</span>,</span>
<span id="cb12-6">    n_results<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb12-7">    output_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"results"</span>,</span>
<span id="cb12-8">    embedding_function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>default_ef</span>
<span id="cb12-9">)</span></code></pre></div>
</section>
<section id="step-6.-defining-worker-agents" class="level4">
<h4 class="anchored" data-anchor-id="step-6.-defining-worker-agents">Step 6. Defining Worker Agents</h4>
<p>The Worker Agent sub-classes the <code>Agent</code> class. The only different between these 2 is in how the <code>run()</code> method works. In the <code>Agent</code> class, <code>run()</code> simply returns the set of tool commands to run, but does not execute it. We, however, desire this. In addition, after we run our tools, we get the relevant information as output. We want to add this information to our memory. Hence, to incorporate these 2 changes, we define <code>WorkerAgent</code> as follows.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> WorkerAgent(Agent):</span>
<span id="cb13-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb13-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb13-4">    </span>
<span id="cb13-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, task, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb13-6">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().run(task, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb13-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response.content)</span>
<span id="cb13-8"></span>
<span id="cb13-9">        json_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(process_json_output(response.content))</span>
<span id="cb13-10"></span>
<span id="cb13-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print(json.dumps(json_dict, indent=2))</span></span>
<span id="cb13-12">        </span>
<span id="cb13-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> response<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb13-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb13-15">                commands <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"commands"</span>]</span>
<span id="cb13-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span>:</span>
<span id="cb13-17">                commands <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [json_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'command'</span>]]</span>
<span id="cb13-18">                </span>
<span id="cb13-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> command <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> commands:</span>
<span id="cb13-20">                tool_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> command[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>]</span>
<span id="cb13-21"></span>
<span id="cb13-22">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> tool_name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'browser'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kay_retriever'</span>]:</span>
<span id="cb13-23">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb13-24">                </span>
<span id="cb13-25">                query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> command[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"args"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query"</span>]</span>
<span id="cb13-26"></span>
<span id="cb13-27">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the tool by its name</span></span>
<span id="cb13-28">                tool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">globals</span>()[tool_name]</span>
<span id="cb13-29">                tool_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tool(query)</span>
<span id="cb13-30"></span>
<span id="cb13-31">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add tool's output to long term memory</span></span>
<span id="cb13-32">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.long_term_memory.add(tool_response)</span></code></pre></div>
<p>We can then instantiate an object of the <code>WorkerAgent</code> class.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">worker_agent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WorkerAgent(</span>
<span id="cb14-2">    agent_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Worker Agent"</span>,</span>
<span id="cb14-3">    system_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(</span>
<span id="cb14-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Autonomous agent that can interact with browser, "</span></span>
<span id="cb14-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"financial data retriever and other agents. Be Helpful "</span> </span>
<span id="cb14-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"and Kind. Use the tools provided to assist the user. "</span></span>
<span id="cb14-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generate the plan with list of commands in JSON format."</span></span>
<span id="cb14-8">    ),</span>
<span id="cb14-9">    llm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>OpenAIChat(</span>
<span id="cb14-10">    temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4"</span>, max_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span></span>
<span id="cb14-11">),</span>
<span id="cb14-12">    max_loops<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"auto"</span>,</span>
<span id="cb14-13">    autosave<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb14-14">    dashboard<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb14-15">    streaming_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb14-16">    verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb14-17">    stopping_token<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;DONE&gt;"</span>,</span>
<span id="cb14-18">    interactive<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb14-19">    tools<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[browser, kay_retriever],</span>
<span id="cb14-20">    long_term_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>memory,</span>
<span id="cb14-21">    code_interpreter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb14-22">)</span></code></pre></div>
</section>
<section id="step-7.-running-the-worker-agents" class="level4">
<h4 class="anchored" data-anchor-id="step-7.-running-the-worker-agents">Step 7. Running the Worker Agents</h4>
<p>At this point, we need to setup a concurrent workflow. While the order of adding tasks to the workflow doesn‚Äôt matter (since they will all run concurrently late when executed), we can take some time to define an order for these tasks. This order will come in handy later when writing the report using our Writer Agent.</p>
<p>The order we will follow is Breadth First Traversal (BFT) of the sub-queries in the graph we had made earlier (shown below again for reference). BFT makes sense to be used here because we want all the dependent parent questions to be answered before answering the child question. Also, since we could have independent subgraphs, we will also perform BFT separately on each subgraph.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://adtygan.github.io/posts/media/query-plan-mini.png" class="img-fluid figure-img"></p>
<figcaption>Parent questions are handled before children questions, giving a coherent outline to the report</figcaption>
</figure>
</div>
<p>Below is the code that produces the order of processing sub-queries.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> deque, defaultdict</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the graph nodes</span></span>
<span id="cb15-4">nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json_object[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sub_queries'</span>]</span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a graph from the nodes</span></span>
<span id="cb15-7">graph <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)</span>
<span id="cb15-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> node <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nodes:</span>
<span id="cb15-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> dependency <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> node[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dependencies'</span>]:</span>
<span id="cb15-10">        graph[dependency].append(node[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>])</span>
<span id="cb15-11"></span>
<span id="cb15-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find all nodes with no dependencies (potential starting points)</span></span>
<span id="cb15-13">start_nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [node[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> node <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nodes <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> node[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dependencies'</span>]]</span>
<span id="cb15-14"></span>
<span id="cb15-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust the BFT function to handle dependencies correctly</span></span>
<span id="cb15-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> bft_corrected(start, graph, nodes_info):</span>
<span id="cb15-17">    visited <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb15-18">    queue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> deque([start])</span>
<span id="cb15-19">    order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-20">    </span>
<span id="cb15-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> queue:</span>
<span id="cb15-22">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> queue.popleft()</span>
<span id="cb15-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> node <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> visited:</span>
<span id="cb15-24">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if all dependencies of the current node are visited</span></span>
<span id="cb15-25">            node_dependencies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [n[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nodes <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> node][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb15-26">            dependencies_met <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(dep <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> visited <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> dep <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nodes_info[node_dependencies][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dependencies'</span>])</span>
<span id="cb15-27">            </span>
<span id="cb15-28">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dependencies_met:</span>
<span id="cb15-29">                visited.add(node)</span>
<span id="cb15-30">                order.append(node)</span>
<span id="cb15-31">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add only nodes to the queue whose dependencies are fully met</span></span>
<span id="cb15-32">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> next_node <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> graph[node]:</span>
<span id="cb15-33">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(dep <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> visited <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> dep <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nodes_info[next_node][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dependencies'</span>]):</span>
<span id="cb15-34">                        queue.append(next_node)</span>
<span id="cb15-35">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb15-36">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Requeue the node to check dependencies later</span></span>
<span id="cb15-37">                queue.append(node)</span>
<span id="cb15-38">    </span>
<span id="cb15-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> order</span>
<span id="cb15-40"></span>
<span id="cb15-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dictionary to access node information quickly</span></span>
<span id="cb15-42">nodes_info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {node[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>]: node <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> node <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nodes}</span>
<span id="cb15-43"></span>
<span id="cb15-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform BFT for each unvisited start node using the corrected BFS function</span></span>
<span id="cb15-45">visited_global <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb15-46">bfs_order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-47"></span>
<span id="cb15-48"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> start <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> start_nodes:</span>
<span id="cb15-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> start <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> visited_global:</span>
<span id="cb15-50">        order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bft_corrected(start, graph, nodes_info)</span>
<span id="cb15-51">        bfs_order.extend(order)</span>
<span id="cb15-52">        visited_global.update(order)</span>
<span id="cb15-53"></span>
<span id="cb15-54"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BFT Order:"</span>, bfs_order)</span></code></pre></div>
<p>This produces the following output.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">BFT Order: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'6'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'10'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'4'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'7'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'8'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'9'</span>]</span></code></pre></div>
<p>Now, let‚Äôs define our <code>ConcurrentWorkflow</code> and run it.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb17-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> swarms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Agent, ConcurrentWorkflow, OpenAIChat, Task</span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a workflow</span></span>
<span id="cb17-6">workflow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConcurrentWorkflow(max_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb17-7">task_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb17-8"></span>
<span id="cb17-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> node <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bfs_order:</span>
<span id="cb17-10">    sub_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nodes_info[node][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'query'</span>]</span>
<span id="cb17-11">    task <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Task(worker_agent, sub_query)</span>
<span id="cb17-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-----------------'</span>)</span>
<span id="cb17-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Added task: "</span>, sub_query)</span>
<span id="cb17-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-----------------'</span>)</span>
<span id="cb17-15">    task_list.append(task)</span>
<span id="cb17-16"></span>
<span id="cb17-17">workflow.add(tasks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>task_list)</span>
<span id="cb17-18"></span>
<span id="cb17-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the workflow</span></span>
<span id="cb17-20">workflow.run()</span></code></pre></div>
<p>Below is part of the output this workflow produces. We clearly see the thought process of the agent and the plan it came up to solve a particular sub-query. In addition, we see the tool-calling schema it produces in <code>"command"</code>.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">...</span>
<span id="cb18-2">...</span>
<span id="cb18-3">content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "thoughts": {</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "text": "To find out Nike</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s current revenue trend, I will use the financial data retriever tool to search for </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Nike revenue trend</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.",</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "reasoning": "The financial data retriever tool allows me to search for specific financial data, so I can look up the current revenue trend of Nike.", </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "plan": "Use the financial data retriever tool to search for </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Nike revenue trend</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">. Parse the result to get the current revenue trend and format that into a readable report."</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  },</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "command": {</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "name": "kay_retriever", </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "args": {</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      "query": "Nike revenue trend"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    }</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  }</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">```'</span> response_metadata<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'token_usage'</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'completion_tokens'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">152</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompt_tokens'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1527</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_tokens'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1679</span>}, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gpt-4'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'system_fingerprint'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'finish_reason'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stop'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logprobs'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>}</span>
<span id="cb18-4">Saved agent state to: Worker Agent_state.json</span>
<span id="cb18-5"></span>
<span id="cb18-6">{</span>
<span id="cb18-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"thoughts"</span>: {</span>
<span id="cb18-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"To find out Nike's current revenue trend, I will use the financial data retriever tool to search for 'Nike revenue trend'."</span>,</span>
<span id="cb18-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reasoning"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The financial data retriever tool allows me to search for specific financial data, so I can look up the current revenue trend of Nike."</span>, </span>
<span id="cb18-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plan"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Use the financial data retriever tool to search for 'Nike revenue trend'. Parse the result to get the current revenue trend and format that into a readable report."</span></span>
<span id="cb18-11">  },</span>
<span id="cb18-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"command"</span>: {</span>
<span id="cb18-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kay_retriever"</span>, </span>
<span id="cb18-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"args"</span>: {</span>
<span id="cb18-15">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nike revenue trend"</span></span>
<span id="cb18-16">    }</span>
<span id="cb18-17">  }</span>
<span id="cb18-18">}</span>
<span id="cb18-19"></span>
<span id="cb18-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-----------------</span></span>
<span id="cb18-21">Document added successfully</span>
<span id="cb18-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-----------------</span></span>
<span id="cb18-23">...</span>
<span id="cb18-24">...</span></code></pre></div>
<p>Here, <code>"name"</code> pertains to the name of the tool to be called and <code>"args"</code> is the arguments to be passed to the tool call. Like mentioned before, we modify <code>Agent</code>‚Äôs default behaviour in <code>WorkerAgent</code>. Hence, the tool call is executed here and its results (information from web pages and Kay Retriever API) are added to long-term memory. We get confirmation for this from the message <code>Document added successfully</code>.</p>
</section>
</section>
<section id="generating-the-report-using-writer-agent" class="level3">
<h3 class="anchored" data-anchor-id="generating-the-report-using-writer-agent">Generating the report using Writer Agent</h3>
<p>At this point, our Worker Agents have gathered all the background information required to generate the report. We have also defined a coherent structure to write the report, which is following the BFT order to answering the sub-queries. Now it‚Äôs time to define a Writer Agent and call it sequentially in the order of sub-queries.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> swarms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Agent, OpenAIChat, tool</span>
<span id="cb19-2"></span>
<span id="cb19-3">agent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Agent(</span>
<span id="cb19-4">    agent_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Writer Agent"</span>,</span>
<span id="cb19-5">    agent_description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(</span>
<span id="cb19-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This agent writes reports based on information in long-term memory"</span></span>
<span id="cb19-7">    ),</span>
<span id="cb19-8">    system_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(</span>
<span id="cb19-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a world-class financial report writer. "</span> </span>
<span id="cb19-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Write analytical and accurate responses using memory to answer the query. "</span></span>
<span id="cb19-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Do not mention use of long-term memory in the report. "</span></span>
<span id="cb19-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Do not mention Writer Agent in response."</span></span>
<span id="cb19-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Return only response content in strict markdown format."</span></span>
<span id="cb19-14">    ),</span>
<span id="cb19-15">    llm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>OpenAIChat(temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gpt-3.5-turbo'</span>),</span>
<span id="cb19-16">    max_loops<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb19-17">    autosave<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb19-18">    verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb19-19">    long_term_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>memory,</span>
<span id="cb19-20">)</span></code></pre></div>
<p>The report individual sections of the report will be collected in a list.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">report <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span></code></pre></div>
<p>Let us now run the writer agent.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> node <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bfs_order:</span>
<span id="cb21-2">    sub_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>nodes_info[node][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'query'</span>]</span>
<span id="cb21-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running task: "</span>, sub_query)</span>
<span id="cb21-4">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> agent.run(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Consider: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sub_query<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Write response in strict markdown format using long-term memory. Do not mention Writer Agent in response."</span>)</span>
<span id="cb21-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(out)</span>
<span id="cb21-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb21-7">        report.append(out.content)</span>
<span id="cb21-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span>:</span>
<span id="cb21-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span></code></pre></div>
<p>Now, we need to clean up the repoort a bit to make it render professionally.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove any content before the first "#" as that signals start of heading</span></span>
<span id="cb22-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Anything before this usually contains filler content</span></span>
<span id="cb22-3">stripped_report <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [entry[entry.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#'</span>):] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> entry <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> entry <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> report]</span>
<span id="cb22-4">report <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stripped_report</span>
<span id="cb22-5"></span>
<span id="cb22-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># At times the LLM outputs \\n instead of \n</span></span>
<span id="cb22-7">cleaned_report <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [entry.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">n"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> report]</span>
<span id="cb22-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb22-9"></span>
<span id="cb22-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to clean up unnecessary metadata from the report entries</span></span>
<span id="cb22-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> clean_report(report):</span>
<span id="cb22-12">    cleaned_report <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb22-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> entry <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> report:</span>
<span id="cb22-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This pattern matches 'response_metadata={' followed by any characters that are not '}' (non-greedy), </span></span>
<span id="cb22-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># possibly nested inside other braces, until the closing '}'.</span></span>
<span id="cb22-16">        cleaned_entry <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.sub(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"response_metadata=\{[^</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">]*(?:\{[^</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">]*\}[^</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">]*)*\}"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, entry, flags<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>re.DOTALL)</span>
<span id="cb22-17">        cleaned_report.append(cleaned_entry)</span>
<span id="cb22-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> cleaned_report</span>
<span id="cb22-19"></span>
<span id="cb22-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the cleaning function to the markdown report</span></span>
<span id="cb22-21">cleaned_report <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clean_report(cleaned_report)</span></code></pre></div>
<p>After cleaning, we append parts of the report together to get out final report.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">final_report <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> '</span>.join(cleaned_report)</span></code></pre></div>
<p>In Jupyter Notebook, we can use the below code to render it in Markdown.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display, Markdown</span>
<span id="cb24-2"></span>
<span id="cb24-3">display(Markdown(final_report))</span></code></pre></div>
</section>
<section id="final-generated-report" class="level2">
<h2 class="anchored" data-anchor-id="final-generated-report">Final Generated Report</h2>
<section id="nikes-current-revenue-trend" class="level3">
<h3 class="anchored" data-anchor-id="nikes-current-revenue-trend">Nike‚Äôs Current Revenue Trend</h3>
<p>Nike‚Äôs current revenue trend has been steadily increasing over the past few years. In the most recent fiscal year, Nike reported a revenue of $37.4 billion, which was a 7% increase from the previous year. This growth can be attributed to strong sales in key markets, successful marketing campaigns, and a focus on innovation in product development. Overall, Nike continues to demonstrate strong financial performance and is well-positioned for future growth.</p>
</section>
<section id="potential-areas-of-improvement-in-nikes-business-model" class="level3">
<h3 class="anchored" data-anchor-id="potential-areas-of-improvement-in-nikes-business-model">Potential Areas of Improvement in Nike‚Äôs Business Model</h3>
<ol type="1">
<li><p><strong>Sustainability Practices</strong>: Nike could further enhance its sustainability efforts by reducing its carbon footprint, using more eco-friendly materials, and ensuring ethical labor practices throughout its supply chain.</p></li>
<li><p><strong>Diversification of Product Portfolio</strong>: While Nike is known for its athletic footwear and apparel, diversifying into new product categories or expanding into untapped markets could help drive growth and mitigate risks associated with a single product line.</p></li>
<li><p><strong>E-commerce Strategy</strong>: Improving the online shopping experience, investing in digital marketing, and leveraging data analytics to personalize customer interactions could boost online sales and customer loyalty.</p></li>
<li><p><strong>Innovation and R&amp;D</strong>: Continuously investing in research and development to stay ahead of competitors, introduce new technologies, and enhance product performance could help maintain Nike‚Äôs competitive edge in the market.</p></li>
<li><p><strong>Brand Image and Reputation</strong>: Strengthening brand image through effective marketing campaigns, community engagement, and transparent communication with stakeholders can help build trust and loyalty among consumers.</p></li>
</ol>
</section>
<section id="potential-cost-saving-strategies-for-nike-to-increase-net-revenue-in-q3-2024" class="level3">
<h3 class="anchored" data-anchor-id="potential-cost-saving-strategies-for-nike-to-increase-net-revenue-in-q3-2024">Potential Cost-Saving Strategies for Nike to Increase Net Revenue in Q3 2024</h3>
<ol type="1">
<li><p><strong>Supply Chain Optimization</strong>: Streamlining the supply chain, reducing transportation costs, and improving inventory management can lead to significant cost savings for Nike.</p></li>
<li><p><strong>Operational Efficiency</strong>: Implementing lean manufacturing practices, reducing waste, and optimizing production processes can help lower production costs and improve overall efficiency.</p></li>
<li><p><strong>Outsourcing Non-Core Functions</strong>: Outsourcing non-core functions such as IT services, customer support, or logistics can help reduce overhead costs and focus resources on core business activities.</p></li>
<li><p><strong>Energy Efficiency</strong>: Investing in energy-efficient technologies, renewable energy sources, and sustainable practices can lower utility costs and demonstrate a commitment to environmental responsibility.</p></li>
<li><p><strong>Negotiating Supplier Contracts</strong>: Negotiating better terms with suppliers, leveraging economies of scale, and exploring alternative sourcing options can help lower procurement costs and improve margins.</p></li>
</ol>
<p>By implementing these cost-saving strategies, Nike can improve its bottom line and increase net revenue in Q3 2024.</p>
</section>
<section id="projected-market-trends-for-the-sports-apparel-industry-in-2024" class="level3">
<h3 class="anchored" data-anchor-id="projected-market-trends-for-the-sports-apparel-industry-in-2024">Projected Market Trends for the Sports Apparel Industry in 2024</h3>
<ol type="1">
<li><p><strong>Sustainable Fashion</strong>: Consumers are increasingly demanding eco-friendly and sustainable products, leading to a rise in sustainable sportswear options in the market.</p></li>
<li><p><strong>Digital Transformation</strong>: The sports apparel industry is expected to continue its shift towards digital platforms, with a focus on e-commerce, personalized shopping experiences, and digital marketing strategies.</p></li>
<li><p><strong>Athleisure Wear</strong>: The trend of athleisure wear, which combines athletic and leisure clothing, is projected to remain popular in 2024 as consumers seek comfort and versatility in their apparel choices.</p></li>
<li><p><strong>Innovative Materials</strong>: Advances in technology and material science are likely to drive the development of innovative fabrics and performance-enhancing materials in sports apparel, catering to the demand for high-quality and functional products.</p></li>
<li><p><strong>Health and Wellness Focus</strong>: With a growing emphasis on health and wellness, sports apparel brands are expected to incorporate features that promote comfort, performance, and overall well-being in their products.</p></li>
</ol>
<p>Overall, the sports apparel industry in 2024 is anticipated to be characterized by sustainability, digitalization, innovation, and a focus on consumer health and lifestyle trends.</p>
</section>
<section id="current-successful-strategies-used-by-nikes-competitors" class="level3">
<h3 class="anchored" data-anchor-id="current-successful-strategies-used-by-nikes-competitors">Current Successful Strategies Used by Nike‚Äôs Competitors</h3>
<ol type="1">
<li><p><strong>Adidas</strong>: Adidas has been successful in leveraging collaborations with celebrities and designers to create limited-edition collections that generate hype and drive sales. They have also focused on sustainability initiatives, such as using recycled materials in their products, to appeal to environmentally conscious consumers.</p></li>
<li><p><strong>Under Armour</strong>: Under Armour has differentiated itself by targeting performance-driven athletes and emphasizing technological innovation in their products. They have also invested heavily in digital marketing and e-commerce to reach a wider audience and enhance the customer shopping experience.</p></li>
<li><p><strong>Puma</strong>: Puma has successfully capitalized on the athleisure trend by offering stylish and versatile sportswear that can be worn both in and out of the gym. They have also focused on building partnerships with influencers and sponsoring high-profile athletes to increase brand visibility and credibility.</p></li>
<li><p><strong>Lululemon</strong>: Lululemon has excelled in creating a strong community around its brand, hosting events, classes, and collaborations to engage with customers beyond just selling products. They have also prioritized customer experience by offering personalized services and creating a seamless omnichannel shopping experience.</p></li>
<li><p><strong>New Balance</strong>: New Balance has carved out a niche in the market by emphasizing quality craftsmanship, heritage, and authenticity in their products. They have also focused on customization and personalization options for customers, allowing them to create unique and tailored footwear and apparel.</p></li>
</ol>
<p>Overall, Nike‚Äôs competitors have found success through a combination of innovative product offerings, strategic marketing initiatives, and a focus on customer engagement and experience.</p>
</section>
<section id="current-and-projected-economic-conditions-in-nikes-major-markets" class="level3">
<h3 class="anchored" data-anchor-id="current-and-projected-economic-conditions-in-nikes-major-markets">Current and Projected Economic Conditions in Nike‚Äôs Major Markets</h3>
<ol type="1">
<li><p><strong>United States</strong>: The United States, being one of Nike‚Äôs largest markets, is currently experiencing moderate economic growth driven by consumer spending, low unemployment rates, and a rebound in manufacturing. However, uncertainties surrounding trade policies, inflation, and interest rates could impact consumer confidence and spending in the near future.</p></li>
<li><p><strong>China</strong>: China remains a key market for Nike, with a growing middle class and increasing demand for sportswear and athletic footwear. Despite recent trade tensions with the U.S., China‚Äôs economy is projected to continue expanding, driven by domestic consumption, infrastructure investments, and technological advancements.</p></li>
<li><p><strong>Europe</strong>: Economic conditions in Europe vary across countries, with some experiencing sluggish growth due to Brexit uncertainties, political instability, and trade tensions. However, overall consumer confidence is improving, and the sports apparel market is expected to grow, driven by e-commerce and sustainability trends.</p></li>
<li><p><strong>Emerging Markets</strong>: Nike‚Äôs presence in emerging markets such as India, Brazil, and Southeast Asia provides opportunities for growth, given the rising disposable incomes, urbanization, and increasing focus on health and fitness. However, challenges such as currency fluctuations, regulatory changes, and competition from local brands could impact Nike‚Äôs performance in these markets.</p></li>
</ol>
<p>Overall, Nike‚Äôs major markets exhibit a mix of opportunities and challenges, with economic conditions influenced by global trends, geopolitical factors, and consumer preferences.‚Äù</p>
</section>
<section id="current-consumer-preferences-in-the-sports-apparel-industry" class="level3">
<h3 class="anchored" data-anchor-id="current-consumer-preferences-in-the-sports-apparel-industry">Current Consumer Preferences in the Sports Apparel Industry</h3>
<ol type="1">
<li><p><strong>Sustainability</strong>: Consumers are increasingly seeking eco-friendly and sustainable options in sports apparel, driving brands to focus on using recycled materials, reducing waste, and promoting ethical practices.</p></li>
<li><p><strong>Athleisure</strong>: The trend of athleisure wear continues to be popular, with consumers looking for versatile and comfortable clothing that can be worn both during workouts and in everyday life.</p></li>
<li><p><strong>Performance and Functionality</strong>: Consumers prioritize performance-enhancing features in sports apparel, such as moisture-wicking fabrics, breathable materials, and ergonomic designs that enhance comfort and mobility.</p></li>
<li><p><strong>Personalization</strong>: Customization options, personalized fit, and unique design elements are appealing to consumers who seek individuality and exclusivity in their sports apparel choices.</p></li>
<li><p><strong>Brand Transparency</strong>: Consumers value transparency in brand practices, including supply chain transparency, ethical sourcing, and clear communication on product quality and manufacturing processes.</p></li>
</ol>
<p>Overall, consumer preferences in the sports apparel industry are shifting towards sustainability, versatility, performance, personalization, and transparency, influencing brand strategies and product offerings.</p>
</section>
<section id="potential-new-markets-for-nike-to-explore-in-2024" class="level3">
<h3 class="anchored" data-anchor-id="potential-new-markets-for-nike-to-explore-in-2024">Potential New Markets for Nike to Explore in 2024</h3>
<ol type="1">
<li><p><strong>India</strong>: With a growing population, increasing disposable incomes, and a rising interest in health and fitness, India presents a significant opportunity for Nike to expand its presence and tap into a large consumer base.</p></li>
<li><p><strong>Africa</strong>: The African market, particularly countries with emerging economies and a young population, offers potential for Nike to introduce its products and capitalize on the growing demand for sportswear and athletic footwear.</p></li>
<li><p><strong>Middle East</strong>: Countries in the Middle East, known for their luxury shopping destinations and a growing interest in sports and fitness activities, could be strategic markets for Nike to target and establish a strong foothold.</p></li>
<li><p><strong>Latin America</strong>: Markets in Latin America, such as Brazil, Mexico, and Argentina, present opportunities for Nike to cater to a diverse consumer base and leverage the region‚Äôs passion for sports and active lifestyles.</p></li>
<li><p><strong>Southeast Asia</strong>: Rapid urbanization, increasing urban middle-class population, and a trend towards health and wellness in countries like Indonesia, Thailand, and Vietnam make Southeast Asia an attractive region for Nike to explore and expand its market reach.</p></li>
</ol>
<p>By exploring these new markets in 2024, Nike can diversify its geographical presence, reach untapped consumer segments, and drive growth in emerging economies.</p>
</section>
<section id="potential-new-products-or-services-nike-could-introduce-in-2024" class="level3">
<h3 class="anchored" data-anchor-id="potential-new-products-or-services-nike-could-introduce-in-2024">Potential New Products or Services Nike Could Introduce in 2024</h3>
<ol type="1">
<li><p><strong>Smart Apparel</strong>: Nike could explore the integration of technology into its apparel, such as smart fabrics that monitor performance metrics, provide feedback, or enhance comfort during workouts.</p></li>
<li><p><strong>Athletic Accessories</strong>: Introducing a line of athletic accessories like gym bags, water bottles, or fitness trackers could complement Nike‚Äôs existing product offerings and provide additional value to customers.</p></li>
<li><p><strong>Customization Platforms</strong>: Offering personalized design options for footwear and apparel through online customization platforms could appeal to consumers seeking unique and tailored products.</p></li>
<li><p><strong>Athletic Recovery Gear</strong>: Developing recovery-focused products like compression wear, recovery sandals, or massage tools could cater to athletes and fitness enthusiasts looking to enhance post-workout recovery.</p></li>
<li><p><strong>Sustainable Collections</strong>: Launching sustainable collections made from eco-friendly materials, recycled fabrics, or biodegradable components could align with consumer preferences for environmentally conscious products.</p></li>
</ol>
<p>By introducing these new products or services in 2024, Nike can innovate its product portfolio, cater to evolving consumer needs, and differentiate itself in the competitive sports apparel market.</p>
</section>
<section id="potential-marketing-strategies-for-nike-to-increase-revenue-in-q3-2024" class="level3">
<h3 class="anchored" data-anchor-id="potential-marketing-strategies-for-nike-to-increase-revenue-in-q3-2024">Potential Marketing Strategies for Nike to Increase Revenue in Q3 2024</h3>
<ol type="1">
<li><p><strong>Influencer Partnerships</strong>: Collaborating with popular athletes, celebrities, or social media influencers to promote Nike products can help reach a wider audience and drive sales.</p></li>
<li><p><strong>Interactive Campaigns</strong>: Launching interactive marketing campaigns, contests, or events that engage customers and create buzz around new product releases can generate excitement and increase brand visibility.</p></li>
<li><p><strong>Social Media Engagement</strong>: Leveraging social media platforms to connect with consumers, share user-generated content, and respond to feedback can build brand loyalty and encourage repeat purchases.</p></li>
<li><p><strong>Localized Marketing</strong>: Tailoring marketing messages, promotions, and product offerings to specific regions or target demographics can enhance relevance and appeal to diverse consumer groups.</p></li>
<li><p><strong>Customer Loyalty Programs</strong>: Implementing loyalty programs, exclusive offers, or rewards for repeat customers can incentivize brand loyalty, increase retention rates, and drive higher lifetime customer value.</p></li>
</ol>
<p>By employing these marketing strategies in Q3 2024, Nike can enhance its brand presence, attract new customers, and ultimately boost revenue growth.</p>


</section>
</section>

 ]]></description>
  <category>AI-Agents</category>
  <guid>https://adtygan.github.io/posts/swarms-business-agent.html</guid>
  <pubDate>Wed, 08 May 2024 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Never Miss a New File with fswatch</title>
  <link>https://adtygan.github.io/posts/fswatch.html</link>
  <description><![CDATA[ 





<p><img src="https://adtygan.github.io/posts/media/fswatch.png" class="img-fluid"></p>
<section id="context" class="level2">
<h2 class="anchored" data-anchor-id="context">Context</h2>
<p>As someone with a new found interest in automating things, I have been working on building a local image search engine called <strong>WarpSearch</strong>. It will allow me to query locally stored images using text and this is amazing because I can dump all my images in one folder and be very hopeful that I will be able to find it later. But folders don‚Äôt remain the same. Images get added or deleted and I need to keep track of these changes.</p>
</section>
<section id="enter-fswatch" class="level2">
<h2 class="anchored" data-anchor-id="enter-fswatch">Enter <code>fswatch</code></h2>
<p>This is where <a href="https://github.com/emcrisostomo/fswatch"><code>fswatch</code></a> comes in clutch. It‚Äôs a tool that allows monitoring a folder for changes. And in this post, I want to cover a general recipe that allows for detecting file additions and deletions in a folder.</p>
<p>Let‚Äôs call the script <code>file-monitor.sh</code>. It monitors the folder path <code>~/Vault</code> and tracks files with extensions <code>.jpg</code>, <code>.jpeg</code> and <code>.png</code>. Both the folder path and file extensions tracked are easy to modify for different scenarios. Below is the code:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">FOLDER</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>~/Vault</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a function to get state of directory</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_state()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FOLDER</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\(</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-iname</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.jpg"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-iname</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.jpeg"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-iname</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.png"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\)</span></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize previous_state with state of directory</span></span>
<span id="cb1-9"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">previous_state</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">get_state</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Monitor the ~/Vault directory for changes</span></span>
<span id="cb1-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">fswatch</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-0</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FOLDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">event</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb1-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For each event, list current state of directory </span></span>
<span id="cb1-14">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">current_state</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">get_state</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Diff current state with previous state</span></span>
<span id="cb1-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$previous_state</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$current_state</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">line</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb1-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$line</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;"</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb1-18">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Added: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${line</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$line</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;"</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-z</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${line</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb1-20">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Deleted: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${line</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">fi</span></span>
<span id="cb1-22">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">done</span></span>
<span id="cb1-23">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">previous_state</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$current_state</span></span>
<span id="cb1-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">done</span></span></code></pre></div>
<p>The code works by comparing the current state of the folder with its previous state. This allows it to detect file additions and deletions. After starting the script with <code>bash file-monitor.sh</code>, I added 2 images and renamed 1 exising image. Here is the output it produces:</p>
<pre class="shell"><code>Added: /Users/aditya/Vault/Orange Boat.jpg
Added: /Users/aditya/Vault/Futuristic Red.jpg
Deleted: /Users/aditya/Vault/Orange Boat.jpg
Added: /Users/aditya/Vault/Orange Boat Illustration.jpg</code></pre>
<p>As you can see, the script handles renaming as a combination of deletion and addition. This is a limitation of the chosen approach. A fix that I haven‚Äôt explored involves the following: When a <code>Deletion + Addition</code> pair is detected, check if the file count remains same before and after the pair of operations. If so, it is a <code>Rename</code> operation.</p>
</section>
<section id="running-as-background-process" class="level2">
<h2 class="anchored" data-anchor-id="running-as-background-process">Running as Background Process</h2>
<p>In most cases, we want the script to run in the background, even after we have closed the terminal. To do this, we first give the script permission to execute as a program.</p>
<pre class="shell"><code>chmod +x ./file-monitor.sh       </code></pre>
<p>Then, we use <code>nohup</code> to run the process in detached mode and store the outputs in a separate log file.</p>
<pre class="shell"><code>nohup ./file-monitor.sh &gt; fswatch.log</code></pre>
</section>
<section id="closing-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="closing-thoughts">Closing Thoughts</h2>
<p>That wraps it up for my first mini-blog. I hope this post encourages you to check out <code>fswatch</code> and try out this recipe for your own use cases. If you have any questions or suggestions, drop your comments below or please reach out to me on <a href="https://twitter.com/adtygan">Twitter</a>.</p>


</section>

 ]]></description>
  <category>File-Systems</category>
  <guid>https://adtygan.github.io/posts/fswatch.html</guid>
  <pubDate>Sun, 31 Mar 2024 16:00:00 GMT</pubDate>
</item>
</channel>
</rss>
