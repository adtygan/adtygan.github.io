<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Aditya Ganesh Kumar</title>
<link>https://adtygan.github.io/blog.html</link>
<atom:link href="https://adtygan.github.io/blog.xml" rel="self" type="application/rss+xml"/>
<description>Personal site of Aditya Ganesh Kumar.</description>
<generator>quarto-1.4.554</generator>
<lastBuildDate>Mon, 01 Apr 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Never Miss a New File with fswatch</title>
  <link>https://adtygan.github.io/posts/fswatch.html</link>
  <description><![CDATA[ 





<section id="context" class="level2">
<h2 class="anchored" data-anchor-id="context">Context</h2>
<p>As someone with a new found interest in automating things, I have been working on building a local image search engine called <strong>WarpSearch</strong>. It will allow me to query locally stored images using text and this is amazing because I can dump all my images in one folder and be very hopeful that I will be able to find it later. But folders don’t remain the same. Images get added or deleted and I need to keep track of these changes.</p>
</section>
<section id="enter-fswatch" class="level2">
<h2 class="anchored" data-anchor-id="enter-fswatch">Enter <code>fswatch</code></h2>
<p>This is where <a href="https://github.com/emcrisostomo/fswatch"><code>fswatch</code></a> comes in clutch. It’s a tool that allows monitoring a folder for changes. And in this post, I want to cover a general recipe that allows for detecting file additions and deletions in a folder.</p>
<p>Let’s call the script <code>file-monitor.sh</code>. It monitors the folder path <code>~/Vault</code> and tracks files with extensions <code>.jpg</code>, <code>.jpeg</code> and <code>.png</code>. Both the folder path and file extensions tracked are easy to modify for different scenarios. Below is the code:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">FOLDER</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>~/Vault</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a function to get state of directory</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_state()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FOLDER</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\(</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-iname</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.jpg"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-iname</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.jpeg"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-iname</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.png"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\)</span></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize previous_state with state of directory</span></span>
<span id="cb1-9"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">previous_state</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">get_state</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Monitor the ~/Vault directory for changes</span></span>
<span id="cb1-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">fswatch</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-0</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FOLDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">event</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb1-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For each event, list current state of directory </span></span>
<span id="cb1-14">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">current_state</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">get_state</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Diff current state with previous state</span></span>
<span id="cb1-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$previous_state</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$current_state</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">line</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb1-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$line</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;"</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb1-18">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Added: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${line</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$line</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;"</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-z</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${line</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb1-20">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Deleted: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${line</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">fi</span></span>
<span id="cb1-22">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">done</span></span>
<span id="cb1-23">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">previous_state</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$current_state</span></span>
<span id="cb1-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">done</span></span></code></pre></div>
<p>The code works by comparing the current state of the folder with its previous state. This allows it to detect file additions and deletions. After starting the script with <code>bash file-monitor.sh</code>, I added 2 images and renamed 1 exising image. Here is the output it produces:</p>
<pre class="shell"><code>Added: /Users/aditya/Vault/Orange Boat.jpg
Added: /Users/aditya/Vault/Futuristic Red.jpg
Deleted: /Users/aditya/Vault/Orange Boat.jpg
Added: /Users/aditya/Vault/Orange Boat Illustration.jpg</code></pre>
<p>As you can see, the script handles renaming as a combination of deletion and addition. This is a limitation of the chosen approach. A fix that I haven’t explored involves the following: When a <code>Deletion + Addition</code> pair is detected, check if the file count remains same before and after the pair of operations. If so, it is a <code>Rename</code> operation.</p>
</section>
<section id="running-as-background-process" class="level2">
<h2 class="anchored" data-anchor-id="running-as-background-process">Running as Background Process</h2>
<p>In most cases, we want the script to run in the background, even after we have closed the terminal. To do this, we first give the script permission to execute as a program.</p>
<pre class="shell"><code>chmod +x ./file-monitor.sh       </code></pre>
<p>Then, we use <code>nohup</code> to run the process in detached mode and store the outputs in a separate log file.</p>
<pre class="shell"><code>nohup ./file-monitor.sh &gt; fswatch.log</code></pre>
</section>
<section id="closing-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="closing-thoughts">Closing Thoughts</h2>
<p>That wraps it up for my first mini-blog. I hope this post encourages you to check out <code>fswatch</code> and try out this recipe for your own use cases. If you have any questions or suggestions, please reach out to me <a href="https://twitter.com/adtygan">on Twitter</a>.</p>


</section>

 ]]></description>
  <category>File-Systems</category>
  <guid>https://adtygan.github.io/posts/fswatch.html</guid>
  <pubDate>Mon, 01 Apr 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Another Quarto Migration Guide for fastpages Users</title>
  <link>https://adtygan.github.io/posts/quarto-migration.html</link>
  <description><![CDATA[ 





<p>For more than four years, I used <a href="https://fastpages.fast.ai/">fastpages</a> for my personal site, <a href="https://sayak.dev">sayak.dev</a>, because it offered a really easy way to do blogging. When its creator, Hamel, <a href="https://forums.fast.ai/t/fastpages-deprecating-fastpages-in-favor-of-quarto/99095">posted</a> about its deprecation in favor of Quarto, I was anxious. Migrations always make me anxious. But I still continued with fastpages anyway.</p>
<p>But entering into this year, I decided to finally switch to Quarto for apparently no specific reason. I think I just wanted a fresh look for my website but didn’t want something too fancy. Quarto provides a perfect balance between simplicity and visual aesthetics. So, I knew I would use Quarto eventually I migrate from fastpages.</p>
<p>Hamel provides an excellent Quarto migration guide for fastpages users <a href="https://nbdev.fast.ai/tutorials/blogging.html">here</a>. However, I had to take care of a few additional things to make it all work and successfully migrate sayak.dev to Quarto. In this post, I want to provide a detailed account of what I did and some personal preferential bits in the hope that it will be beneficial for someone else. Let’s get started 💫</p>
<section id="bit-0-go-through-the-original-migration-guide" class="level3">
<h3 class="anchored" data-anchor-id="bit-0-go-through-the-original-migration-guide">Bit 0: Go through the original migration guide</h3>
<p>This post assumes that you’re here because you’re migrating your fastpages website to Quarto. So, it’s a must that you first read <a href="https://nbdev.fast.ai/tutorials/blogging.html">Hamel’s migration guide</a> in detail.</p>
</section>
<section id="bit-1-install-nbdev-from-source" class="level3">
<h3 class="anchored" data-anchor-id="bit-1-install-nbdev-from-source">Bit 1: Install <code>nbdev</code> from source</h3>
<p>While running the <code>nbdev_migrate --path posts</code> step, you might encounter compatibility problems. This is, luckily, easily mitigated by installing <code>nbdev</code> from source:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install git+https://github.com/fastai/nbdev</span></code></pre></div>
</section>
<section id="bit-2-use-a-separate-repository-for-dev" class="level3">
<h3 class="anchored" data-anchor-id="bit-2-use-a-separate-repository-for-dev">Bit 2: Use a separate repository for dev</h3>
<p>I found it it’s better and more convenient to use a separate repository while doing the initial developments related to the migration. For example, my website code is hosted at https://github.com/sayakpaul/portfolio/, but I maintained another repository during the initial development.</p>
<p>This especially comes in handy for setting up the GitHub Actions, previewing the site with GitHub Pages, etc. This way, you can also ensure that everything looks hunky-dory before you move the contents to the actual serving repository (“portfolio” in my case).</p>
</section>
<section id="bit-3-connect-with-github-actions-and-pages" class="level3">
<h3 class="anchored" data-anchor-id="bit-3-connect-with-github-actions-and-pages">Bit 3: Connect with GitHub Actions and Pages</h3>
<p>Most of us (if not all) want to automate the website publishing process after a change is pushed to the serving repository. So, we should definitely set up a workflow that does this for us. Refer to the <a href="https://quarto.org/docs/publishing/github-pages.html#github-action">official Quarto documentation</a> to use the recommended worflow file. It covers most use cases and it worked like a charm in my case. I didn’t have to touch a single thing in the workflow. Refer <a href="https://quarto.org/docs/publishing/github-pages.html#source-branch">here</a> for connecting your site with GitHub Pages.</p>
</section>
<section id="bit-4-pay-attention-to-branch-names" class="level3">
<h3 class="anchored" data-anchor-id="bit-4-pay-attention-to-branch-names">Bit 4: Pay attention to branch names</h3>
<p>If you used another repository as suggested in “Bit 2”, be careful about the branch names when moving the contents over to the actual repository. You need to configure a repository branch name in the following places, for example:</p>
<ul>
<li>The publishing <a href="https://github.com/sayakpaul/portfolio/blob/b51a1d390c26d3bfef49e40c5723a30f5b6ee9f0/.github/workflows/publish.yml#L4">worfkflow</a></li>
<li>The “_quarto.yml” <a href="https://github.com/sayakpaul/portfolio/blob/b51a1d390c26d3bfef49e40c5723a30f5b6ee9f0/_quarto.yml#L23">configuration</a></li>
</ul>
<p>This is important to note because fastpages defaults to “master” while recent GitHub repositories default to “main”.</p>
</section>
<section id="bit-5-careful-copying" class="level3">
<h3 class="anchored" data-anchor-id="bit-5-careful-copying">Bit 5: Careful copying</h3>
<p><em>(Only applicable if you used another repository as per “Bit 2”)</em></p>
<p>When you’re satisfied with the migrated content, you may wish to copy over all the elements in the original repository. Some things I found to be useful to keep in mind while performing this step (assuming both the backup and original repositories are locally cloned):</p>
<ul>
<li>Clear out the original repository contents, first: <code>rm -rf * .gitignore .github</code>. This will remove all the files and folders along with the <code>.gitignore</code> file. You can add any other hidden files to the mix as needed. But don’t accidentally delete the <code>.git</code> file.</li>
<li>Copy over the contents from your backup repository: <code>cp -r backup_repo/* original_repo/ &amp;&amp; cp -r backup_repo/.github original_repo/</code>. Finally, copy the <code>.gitignore</code> file: <code>cp backup_repo/.gitignore original_repo/</code>. You can copy any additional hidden file as needed, but not the <code>.git</code> file.</li>
</ul>
<p>I know that this step is slightly involved and can potentially be made simpler.</p>
</section>
<section id="bit-6-configuring-a-custom-domain" class="level3">
<h3 class="anchored" data-anchor-id="bit-6-configuring-a-custom-domain">Bit 6: Configuring a custom domain</h3>
<p><em>(Only applicable if you’re serving from a custom domain)</em></p>
<p>I struggled with this step a little. After setting up the CNAME on my repository <a href="https://github.com/sayakpaul/portfolio/blob/master/CNAME">here</a> and configuring the GitHub Pages section as shown <a href="https://huggingface.co/datasets/sayakpaul/sample-datasets/blob/main/github_pages_sayak.png">here</a>, my site was not getting rendered at “sayak.dev”, yielding 404 errors. After some Google searches, I stumbled upon <a href="https://github.com/quarto-dev/quarto-cli/discussions/3249#discussioncomment-4090518">this thread</a>, and it solved the problem!</p>
<p>And that’s it! I found the Quarto resources to be really self-sufficient and the migration process was way smoother than expected, thanks to the amazing resources.</p>


</section>

 ]]></description>
  <category>quarto</category>
  <category>blogging</category>
  <category>fastpages</category>
  <guid>https://adtygan.github.io/posts/quarto-migration.html</guid>
  <pubDate>Wed, 17 Jan 2024 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
